<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dota-Wings</title>
    <url>/2021/07/25/daily/dota/</url>
    <content><![CDATA[<h4 id="【天下DotA】Ti6-Wings夺冠特辑（上）：远征海外，如履薄冰——小组赛有惊无险"><a href="#【天下DotA】Ti6-Wings夺冠特辑（上）：远征海外，如履薄冰——小组赛有惊无险" class="headerlink" title="【天下DotA】Ti6 Wings夺冠特辑（上）：远征海外，如履薄冰——小组赛有惊无险"></a>【天下DotA】Ti6 Wings夺冠特辑（上）：远征海外，如履薄冰——小组赛有惊无险</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
  <iframe src="//player.bilibili.com/player.html?aid=6087630&bvid=BV1ss41167pe&cid=9883364&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" > </iframe>
    <!-- style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" -->
</div>


<h4 id="【天下DotA】Ti6-Wings夺冠特辑（中）：只影前行，扬刀立名——淘汰赛势如破竹"><a href="#【天下DotA】Ti6-Wings夺冠特辑（中）：只影前行，扬刀立名——淘汰赛势如破竹" class="headerlink" title="【天下DotA】Ti6 Wings夺冠特辑（中）：只影前行，扬刀立名——淘汰赛势如破竹"></a>【天下DotA】Ti6 Wings夺冠特辑（中）：只影前行，扬刀立名——淘汰赛势如破竹</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
  <iframe src="//player.bilibili.com/player.html?aid=6244868&bvid=BV1Gs411r7cR&cid=10144583&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" > </iframe>
</div>


<h4 id="【天下DotA】Ti6-Wings夺冠特辑（下）：胸怀信念，振翅高飞——总决赛梦想成真"><a href="#【天下DotA】Ti6-Wings夺冠特辑（下）：胸怀信念，振翅高飞——总决赛梦想成真" class="headerlink" title="【天下DotA】Ti6 Wings夺冠特辑（下）：胸怀信念，振翅高飞——总决赛梦想成真"></a>【天下DotA】Ti6 Wings夺冠特辑（下）：胸怀信念，振翅高飞——总决赛梦想成真</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
  <iframe src="//player.bilibili.com/player.html?aid=6491934&bvid=BV13s411b7J3&cid=10558977&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" > </iframe>
</div>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>dota2</tag>
      </tags>
  </entry>
  <entry>
    <title>我的团长我的团</title>
    <url>/2021/07/25/daily/%E6%88%91%E7%9A%84%E5%9B%A2%E9%95%BF%E6%88%91%E7%9A%84%E5%9B%A2/</url>
    <content><![CDATA[<h4 id="【1900】《我的团长我的团》精讲合集"><a href="#【1900】《我的团长我的团》精讲合集" class="headerlink" title="【1900】《我的团长我的团》精讲合集"></a>【1900】《我的团长我的团》精讲合集</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
  <iframe src="//player.bilibili.com/player.html?aid=885141636&bvid=BV1EK4y1E7YT&cid=254504043&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" > </iframe>
    <!-- style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" -->
</div>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>我的团长我的团</tag>
      </tags>
  </entry>
  <entry>
    <title>My Baby</title>
    <url>/2021/06/13/daily/My-Baby/</url>
    <content><![CDATA[<p><img src="/images/baby.png" alt="土豆"></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/07/10/docker/docker/</url>
    <content><![CDATA[<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h4 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">path: /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="lazydocker"><a href="#lazydocker" class="headerlink" title="lazydocker"></a>lazydocker</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/.config/jesseduffield/lazydocker lazyteam/lazydocker</span><br></pre></td></tr></table></figure>

<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><details><summary> ddns </summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  ddns:</span><br><span class="line">    image: sanjusss/aliyun-ddns</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      <span class="comment">#  https://usercenter.console.aliyun.com/</span></span><br><span class="line">      AKID: </span><br><span class="line">      AKSCT: </span><br><span class="line">      DOMAIN: </span><br><span class="line">      REDO: 30</span><br><span class="line">      TTL: 600</span><br><span class="line">      TIMEZONE: 8.0</span><br><span class="line">      TYPE: A,AAAA</span><br></pre></td></tr></table></figure>

</details>

<details><summary> gops </summary>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:11-alpine</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_USER: <span class="string">&#x27;gogs&#x27;</span></span><br><span class="line">      POSTGRES_PASSWORD: <span class="string">&#x27;gogs&#x27;</span></span><br><span class="line">      POSTGRES_DB: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - gogs_net</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/postgres_data:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  gogs:</span><br><span class="line">    image: gogs/gogs:latest</span><br><span class="line">    networks:</span><br><span class="line">      - gogs_net</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;10022:22&quot;</span></span><br><span class="line">      - <span class="string">&quot;10080:3000&quot;</span></span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/gogs_data:/data:rw</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  gogs_net:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>

</details>

<details><summary> httpbin </summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 kennethreitz/httpbin</span><br><span class="line">http://127.0.0.1/get?show_env=1</span><br></pre></td></tr></table></figure>
</details>


<details><summary> hoppscotch </summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --rm --name hoppscotch -p 3000:3000 hoppscotch/hoppscotch:latest</span><br></pre></td></tr></table></figure>
</details>


<details><summary> mongoDB </summary>
  
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .env</span></span><br><span class="line">MONGO_ROOT_USER=username</span><br><span class="line">MONGO_ROOT_PASSWORD=password</span><br><span class="line">MONGODB_URL=mongodb://username:password@mongo:27017</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mongo.yml</span></span><br><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mongo:</span><br><span class="line">    image: mongo</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 27017:27017</span><br><span class="line">    environment:</span><br><span class="line">      - MONGO_INITDB_ROOT_USERNAME=<span class="variable">$&#123;MONGO_ROOT_USER&#125;</span></span><br><span class="line">      - MONGO_INITDB_ROOT_PASSWORD=<span class="variable">$&#123;MONGO_ROOT_PASSWORD&#125;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/mongo:/data/db</span><br><span class="line"></span><br><span class="line">  mongo-express:</span><br><span class="line">    image: mongo-express</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:8081</span><br><span class="line">    links:</span><br><span class="line">      - mongo</span><br><span class="line">    environment:</span><br><span class="line">      - ME_CONFIG_MONGODB_URL=<span class="variable">$&#123;MONGODB_URL&#125;</span></span><br><span class="line">      - ME_CONFIG_BASICAUTH_USERNAME=<span class="variable">$&#123;MONGO_ROOT_USER&#125;</span></span><br><span class="line">      - ME_CONFIG_BASICAUTH_PASSWORD=<span class="variable">$&#123;MONGO_ROOT_PASSWORD&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>


<details><summary> MySQL </summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    <span class="comment"># We use a mariadb image which supports both amd64 &amp; arm64 architecture</span></span><br><span class="line">    image: mariadb:10.6.4-focal</span><br><span class="line">    <span class="comment"># If you really want to use MySQL, uncomment the following line</span></span><br><span class="line">    <span class="comment">#image: mysql:8.0.27</span></span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;--default-authentication-plugin=mysql_native_password&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/mysql:/var/lib/mysql</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=password</span><br><span class="line">      - MYSQL_DATABASE=data</span><br><span class="line">      - MYSQL_USER=user</span><br><span class="line">      - MYSQL_PASSWORD=password</span><br><span class="line">      - MYSQL_ROOT_HOST=%</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br></pre></td></tr></table></figure>


<p> linux配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/mysql/my.cnf:</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br></pre></td></tr></table></figure>


<p> others</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line">mysqldump -u root -p --all-databases &gt; data.txt</span><br><span class="line"><span class="built_in">source</span> data.txt</span><br><span class="line"></span><br><span class="line">create database testdb default charset utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">http://docs.peewee-orm.com/en/latest/peewee/playhouse.html<span class="comment">#pwiz-a-model-generator</span></span><br></pre></td></tr></table></figure>

</details>


<details><summary>pgadmin4</summary>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  pgadmin:</span><br><span class="line">    container_name: pgadmin4_container</span><br><span class="line">    image: dpage/pgadmin4</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      PGADMIN_DEFAULT_EMAIL: xx@xx.com</span><br><span class="line">      PGADMIN_DEFAULT_PASSWORD: password</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span></span><br></pre></td></tr></table></figure>

</details>


<details><summary> PostgreSQL </summary>
  
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:10-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 5432:5432</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_PASSWORD: <span class="string">&#x27;password&#x27;</span></span><br><span class="line">      POSTGRES_USER: <span class="string">&#x27;user&#x27;</span></span><br><span class="line">      POSTGRES_DB: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">      PGDATA: <span class="string">&#x27;/var/lib/postgresql/data&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  admin:</span><br><span class="line">    image: adminer</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on: </span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可视化工具推荐</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e SESSIONS=<span class="literal">true</span> -p 8081:8081 sosedoff/pgweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">tableplus</span><br></pre></td></tr></table></figure>

<p>在linux 中安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install postgresql-client</span><br><span class="line">sudo apt-get install postgresql</span><br><span class="line"><span class="comment"># sudo apt-get install pgadmin3</span></span><br><span class="line"><span class="comment"># pgcli</span></span><br><span class="line"></span><br><span class="line">sudo adduser dbuser</span><br><span class="line">sudo su - postgres</span><br><span class="line"><span class="comment"># sudo -u postgres psql</span></span><br><span class="line">psql</span><br><span class="line">\password postgres</span><br><span class="line">CREATE USER dbuser WITH PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">CREATE DATABASE exampledb OWNER dbuser;</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;</span><br><span class="line"></span><br><span class="line">psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</span><br><span class="line">psql exampledb</span><br><span class="line"><span class="comment"># psql exampledb &lt; exampledb.sql  #恢复外部数据</span></span><br><span class="line">pg_dump -U username -h localhost databasename &gt;&gt; sqlfile.sql</span><br><span class="line"></span><br><span class="line">sudo vi /etc/postgresql/9.5/main/postgresql.conf</span><br><span class="line">sudo gedit /etc/postgresql/9.5/main/pg_hba.conf		host all all 0.0.0.0/0 md5</span><br><span class="line">sudo /etc/init.d/postgresql restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询有外键的数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">select count(*) from <span class="string">&quot;case&quot;</span> <span class="built_in">where</span> court_id <span class="keyword">in</span> (select id from court <span class="built_in">where</span> province =<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>导出数据结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m pwiz -e postgresql -u user -P db &gt; model.py</span><br><span class="line">python -m pwiz -e mysql -H 192.168.1.x -u root -P dbname &gt; model.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>


<details><summary> Postwoman </summary>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 3000:3000 liyasthomas/postwoman:latest</span><br></pre></td></tr></table></figure>
</details>


<details><summary> Redis </summary>

<p>redis 及其持久化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis.conf</span></span><br><span class="line">requirepass 123456</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">      image: redis</span><br><span class="line">      restart: unless-stopped</span><br><span class="line">      <span class="comment"># command: redis-server --requirepass 123456</span></span><br><span class="line">      <span class="built_in">command</span>: redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br><span class="line">      ports:</span><br><span class="line">        - 6379:6379</span><br><span class="line">      volumes:</span><br><span class="line">        - ./redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br><span class="line">        - ./data/redis:/data/</span><br></pre></td></tr></table></figure>

</details>


<details><summary>书签管理器 shiori</summary>


<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原链接 https://github.com/go-shiori/shiori/</span></span><br><span class="line"><span class="comment"># loginuser: shiori 	</span></span><br><span class="line"><span class="comment"># passwd: gopher</span></span><br><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  shiori:</span><br><span class="line">    image: nicholaswilde/shiori:latest</span><br><span class="line">    container_name: shiori-default</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">      PUID: 1000</span><br><span class="line">      PGID: 1000</span><br><span class="line">      SHIORI_PG_HOST: db</span><br><span class="line">      SHIORI_PG_PORT: 5432</span><br><span class="line">      SHIORI_PG_USER: user</span><br><span class="line">      SHIORI_PG_PASS: password</span><br><span class="line">      SHIORI_PG_NAME: <span class="string">&quot;&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/shiori:/data</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_USER: user</span><br><span class="line">      POSTGRES_PASSWORD: password</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/shiori_postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details><summary>Gitea</summary>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web管理界面里 默认端口3000和22不要改</span></span><br><span class="line"><span class="comment"># example: ssh://git@viewer.pub:58001/user/project.git</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  gitea:</span><br><span class="line">    external: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  server:</span><br><span class="line">    image: gitea/gitea:1.15.4</span><br><span class="line">    container_name: gitea</span><br><span class="line">    environment:</span><br><span class="line">      - USER_UID=1000</span><br><span class="line">      - USER_GID=1000</span><br><span class="line">      - DB_TYPE=postgres</span><br><span class="line">      - DB_HOST=db:5432</span><br><span class="line">      - DB_NAME=gitea</span><br><span class="line">      - DB_USER=username</span><br><span class="line">      - DB_PASSWD=password</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - gitea</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/gitea/data:/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;58000:3000&quot;</span></span><br><span class="line">      - <span class="string">&quot;58001:22&quot;</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: postgres:13-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=username</span><br><span class="line">      - POSTGRES_PASSWORD=password</span><br><span class="line">      - POSTGRES_DB=gitea</span><br><span class="line">    networks:</span><br><span class="line">      - gitea</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/gitea/postgres:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
</details>

<details><summary>samba</summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  samba:</span><br><span class="line">    image: dperson/samba</span><br><span class="line">    environment:</span><br><span class="line">      TZ: <span class="string">&#x27;EST5EDT&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;137:137/udp&quot;</span></span><br><span class="line">      - <span class="string">&quot;138:138/udp&quot;</span></span><br><span class="line">      - <span class="string">&quot;139:139/tcp&quot;</span></span><br><span class="line">      - <span class="string">&quot;445:445/tcp&quot;</span></span><br><span class="line">    read_only: <span class="literal">true</span></span><br><span class="line">    tmpfs:</span><br><span class="line">      - /tmp</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    stdin_open: <span class="literal">true</span></span><br><span class="line">    tty: <span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data:/mnt:z</span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;-s &quot;Volume;/mnt;yes;no;no;USER&quot; -u &quot;USER;PASSWORD&quot; -p&#x27;</span></span><br></pre></td></tr></table></figure>
</details>

<details><summary>automatic-api: nocodb</summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  root_db:</span><br><span class="line">    image: postgres:13-alpine</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 5432:5432</span><br><span class="line">    <span class="built_in">command</span>: postgres -c <span class="string">&#x27;max_connections=500&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_PASSWORD: <span class="string">&#x27;passwd&#x27;</span></span><br><span class="line">      POSTGRES_USER: <span class="string">&#x27;username&#x27;</span></span><br><span class="line">      POSTGRES_DB: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">      PGDATA: <span class="string">&#x27;/var/lib/postgresql/data&#x27;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: pg_isready -U <span class="string">&quot;$<span class="variable">$POSTGRES_USER</span>&quot;</span> -d <span class="string">&quot;$<span class="variable">$POSTGRES_DB</span>&quot;</span></span><br><span class="line">      interval: 10s</span><br><span class="line">      timeout: 2s</span><br><span class="line">      retries: 10</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/nocodb_pg:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  nocodb:</span><br><span class="line">    depends_on:</span><br><span class="line">      root_db:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    image: nocodb/nocodb:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      - <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line">      - <span class="string">&quot;8082:8082&quot;</span></span><br><span class="line">      - <span class="string">&quot;8083:8083&quot;</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      NC_DB: <span class="string">&quot;pg://root_db:5432?u=username&amp;p=passwd&amp;d=postgres&quot;</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure>
</details>

<details><summary>automatic-api: prest</summary>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/prest/prest#test-using-docker</span></span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./data/postgres:/var/lib/postgresql/data&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=prest</span><br><span class="line">      - POSTGRES_DB=prest</span><br><span class="line">      - POSTGRES_PASSWORD=prest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;prest&quot;</span>]</span><br><span class="line">      interval: 30s</span><br><span class="line">      retries: 3</span><br><span class="line">  prest:</span><br><span class="line">    <span class="comment"># use latest build - analyze the risk of using this version in production</span></span><br><span class="line">    image: prest/prest</span><br><span class="line">    links:</span><br><span class="line">      - <span class="string">&quot;postgres:postgres&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - PREST_DEBUG=<span class="literal">false</span></span><br><span class="line">      - PREST_AUTH_ENABLED=<span class="literal">true</span></span><br><span class="line">      - PREST_PG_HOST=postgres</span><br><span class="line">      - PREST_PG_USER=prest</span><br><span class="line">      - PREST_PG_PASS=prest</span><br><span class="line">      - PREST_PG_DATABASE=prest</span><br><span class="line">      - PREST_PG_PORT=5432</span><br><span class="line">      - PREST_SSL_MODE=<span class="built_in">disable</span></span><br><span class="line">    depends_on:</span><br><span class="line">      postgres:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3000:3000&quot;</span></span><br></pre></td></tr></table></figure>
</details>


<details><summary>电影播放 embyserver 和 下载管理 aria2 </summary>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  Aria2-Pro:</span><br><span class="line">    container_name: aria2-pro</span><br><span class="line">    image: p3terx/aria2-pro</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=65534</span><br><span class="line">      - PGID=65534</span><br><span class="line">      - UMASK_SET=022</span><br><span class="line">      - RPC_SECRET=update_me</span><br><span class="line">      - RPC_PORT=6800</span><br><span class="line">      - LISTEN_PORT=6888</span><br><span class="line">      - DISK_CACHE=64M</span><br><span class="line">      - IPV6_MODE=<span class="literal">true</span></span><br><span class="line">      - UPDATE_TRACKERS=<span class="literal">true</span></span><br><span class="line">      - CUSTOM_TRACKER_URL=</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="variable">$&#123;PWD&#125;</span>/data/aria2-config:/config</span><br><span class="line">      - <span class="variable">$&#123;PWD&#125;</span>/data/embyserver/movies:/downloads</span><br><span class="line"><span class="comment"># If you use host network mode, then no port mapping is required.</span></span><br><span class="line"><span class="comment"># This is the easiest way to use IPv6 networks.</span></span><br><span class="line">    <span class="comment"># network_mode: host</span></span><br><span class="line"><span class="comment">#    network_mode: bridge</span></span><br><span class="line">    ports:</span><br><span class="line">     - 6800:6800</span><br><span class="line">     - 6888:6888</span><br><span class="line">     - 6888:6888/udp</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"><span class="comment"># Since Aria2 will continue to generate logs, limit the log size to 1M to prevent your hard disk from running out of space.</span></span><br><span class="line">    logging:</span><br><span class="line">      driver: json-file</span><br><span class="line">      options:</span><br><span class="line">        max-size: 1m</span><br><span class="line"></span><br><span class="line"><span class="comment"># AriaNg is just a static web page, usually you only need to deploy on a single host.</span></span><br><span class="line">  AriaNg:</span><br><span class="line">    container_name: ariang</span><br><span class="line">    image: p3terx/ariang</span><br><span class="line">    <span class="built_in">command</span>: --port 6880 --ipv6</span><br><span class="line">    <span class="comment"># network_mode: host</span></span><br><span class="line"><span class="comment">#    network_mode: bridge</span></span><br><span class="line">    ports:</span><br><span class="line">      - 192.168.50.4:6880:6880</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    logging:</span><br><span class="line">      driver: json-file</span><br><span class="line">      options:</span><br><span class="line">        max-size: 1m</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">version: <span class="string">&quot;2.3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  emby:</span><br><span class="line">    image: emby/embyserver</span><br><span class="line">    container_name: embyserver</span><br><span class="line">    runtime: nvidia <span class="comment"># Expose NVIDIA GPUs</span></span><br><span class="line">    <span class="comment"># network_mode: host # Enable DLNA and Wake-on-Lan</span></span><br><span class="line">    environment:</span><br><span class="line">      - UID=1000 <span class="comment"># The UID to run emby as (default: 2)</span></span><br><span class="line">      - GID=100 <span class="comment"># The GID to run emby as (default 2)</span></span><br><span class="line">      - GIDLIST=100 <span class="comment"># A comma-separated list of additional GIDs to run emby as (default: 2)</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/embyserver/programdata:/config <span class="comment"># Configuration directory</span></span><br><span class="line">      - ./data/embyserver/tvshows:/mnt/share1 <span class="comment"># Media directory</span></span><br><span class="line">      - ./data/embyserver/movies:/media</span><br><span class="line">    ports:</span><br><span class="line">      - 8096:8096 <span class="comment"># HTTP port</span></span><br><span class="line">      <span class="comment"># - 8920:8920 # HTTPS port</span></span><br><span class="line">    devices:</span><br><span class="line">      - /dev/dri:/dev/dri <span class="comment"># VAAPI/NVDEC/NVENC render nodes</span></span><br><span class="line">    <span class="comment">#   - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi</span></span><br><span class="line">    restart: unless-stopped      </span><br></pre></td></tr></table></figure>
</details>

<figure class="highlight sh"><figcaption><span>网盘 cloudreve >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir -vp cloudreve/&#123;uploads,avatar&#125; \</span><br><span class="line">&amp;&amp; touch cloudreve/conf.ini \</span><br><span class="line">&amp;&amp; touch cloudreve/cloudreve.db \</span><br><span class="line">&amp;&amp; mkdir -p aria2/config \</span><br><span class="line">&amp;&amp; mkdir -p data/aria2 \</span><br><span class="line">&amp;&amp; chmod -R 777 data/aria2</span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line">services:</span><br><span class="line">  cloudreve:</span><br><span class="line">    container_name: cloudreve</span><br><span class="line">    image: cloudreve/cloudreve:latest</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5212:5212&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/aria2/downloads:/downloads</span><br><span class="line">      - ./data/cloudreve/uploads:/cloudreve/uploads</span><br><span class="line">      - ./data/cloudreve/conf.ini:/cloudreve/conf.ini</span><br><span class="line">      - ./data/cloudreve/cloudreve.db:/cloudreve/cloudreve.db</span><br><span class="line">      - ./data/cloudreve/avatar:/cloudreve/avatar</span><br><span class="line">    depends_on:</span><br><span class="line">      - Aria2-Pro</span><br><span class="line"></span><br><span class="line">  Aria2-Pro:</span><br><span class="line">    container_name: aria2-pro</span><br><span class="line">    image: p3terx/aria2-pro</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=65534</span><br><span class="line">      - PGID=65534</span><br><span class="line">      - UMASK_SET=022</span><br><span class="line">      - RPC_SECRET=0b5c74bcc83fc89f29b6f9f4e8a812ef87f69258</span><br><span class="line">      - RPC_PORT=6800</span><br><span class="line">      - LISTEN_PORT=6888</span><br><span class="line">      - DISK_CACHE=64M</span><br><span class="line">      - IPV6_MODE=<span class="literal">true</span></span><br><span class="line">      - UPDATE_TRACKERS=<span class="literal">true</span></span><br><span class="line">      <span class="comment"># - CUSTOM_TRACKER_URL=</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/aria2/config:/config</span><br><span class="line">      - ./data/aria2/downloads:/downloads</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">     </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SwitchyOmega</title>
    <url>/2021/07/28/linux/SwitchyOmega/</url>
    <content><![CDATA[<p>SwitchyOmega 访问变慢<br>关闭chrome的安全dns<br>Privacy and Security -&gt; Security -&gt; Use Secure DNS</p>
<p>参考: <a href="https://github.com/FelisCatus/SwitchyOmega/issues/1742#issuecomment-826272936">https://github.com/FelisCatus/SwitchyOmega/issues/1742#issuecomment-826272936</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>adb</title>
    <url>/2022/01/10/linux/adb/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>adb commands</span></figcaption><table><tr><td class="code"><pre><span class="line">adb devices <span class="comment">#查看连接设备</span></span><br><span class="line"></span><br><span class="line">adb start-server 启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</span><br><span class="line"></span><br><span class="line">adb kill-server 停止adb server</span><br><span class="line"></span><br><span class="line">adb -s cf27456f shell <span class="comment"># 指定连接设备使用命令</span></span><br><span class="line"></span><br><span class="line">adb install test.apk <span class="comment"># 安装应用</span></span><br><span class="line"></span><br><span class="line">adb install -r demo.apk <span class="comment">#安装apk 到sd 卡：</span></span><br><span class="line"></span><br><span class="line">adb uninstall cn.com.test.mobile <span class="comment">#卸载应用，需要指定包</span></span><br><span class="line"></span><br><span class="line">adb uninstall -k cn.com.test.mobile <span class="comment">#卸载app 但保留数据和缓存文件</span></span><br><span class="line"></span><br><span class="line">adb shell pm list packages <span class="comment">#列出手机装的所有app 的包名</span></span><br><span class="line"></span><br><span class="line">adb shell pm list packages -s 列出系统应用的所有包名</span><br><span class="line"></span><br><span class="line">adb shell pm list packages -3 <span class="comment">#列出除了系统应用的第三方应用包名</span></span><br><span class="line"></span><br><span class="line">adb shell pm clear cn.com.test.mobile <span class="comment">#清除应用数据与缓存</span></span><br><span class="line"></span><br><span class="line">adb shell am start -ncn.com.test.mobile/.ui.SplashActivity <span class="comment">#启动应用</span></span><br><span class="line"></span><br><span class="line">adb shell dumpsys package <span class="comment">#包信息Package Information</span></span><br><span class="line"></span><br><span class="line">adb shell dumpsys meminfo <span class="comment">#内存使用情况Memory Usage</span></span><br><span class="line"></span><br><span class="line">adb shell am force-stop cn.com.test.mobile <span class="comment">#强制停止应用</span></span><br><span class="line"></span><br><span class="line">adb logcat <span class="comment">#查看日志</span></span><br><span class="line"></span><br><span class="line">adb logcat -c <span class="comment">#清除log 缓存</span></span><br><span class="line"></span><br><span class="line">adb reboot <span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line">adb get-serialno <span class="comment">#获取序列号</span></span><br><span class="line"></span><br><span class="line">adb shell getprop ro.build.version.release <span class="comment">#查看Android 系统版本</span></span><br><span class="line"></span><br><span class="line">adb shell top -s 10 <span class="comment">#查看占用内存前10 的app</span></span><br><span class="line"></span><br><span class="line">adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt; <span class="comment">#从本地复制文件到设备</span></span><br><span class="line"></span><br><span class="line">adb pull &lt;remote&gt; &lt;<span class="built_in">local</span>&gt; <span class="comment">#从设备复制文件到本地</span></span><br><span class="line"></span><br><span class="line">adb bugreport <span class="comment">#查看bug 报告</span></span><br><span class="line"></span><br><span class="line">adb <span class="built_in">help</span> <span class="comment">#查看ADB 帮助</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>arch pppoe</title>
    <url>/2022/01/29/linux/arch-pppoe/</url>
    <content><![CDATA[<h3 id="pppoe-拨号"><a href="#pppoe-拨号" class="headerlink" title="pppoe 拨号"></a>pppoe 拨号</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S --noconfirm rp-pppoe</span><br><span class="line"></span><br><span class="line">ifconfig <span class="comment"># 查看对应的网卡</span></span><br><span class="line">sudo ifconfig 网卡 down <span class="comment"># 停止网卡服务</span></span><br><span class="line">sudo pppoe-setup <span class="comment"># 输入对应的用户名密码等信息</span></span><br><span class="line">sudo pppoe-start</span><br><span class="line"></span><br><span class="line">sudo route delete default</span><br><span class="line">sudo route add default ppp0 <span class="comment"># ppp0可能是其他名字 ifconfig查看</span></span><br><span class="line"></span><br><span class="line">sudo nvim /etc/resolvconf.conf <span class="comment"># 更新name_servers</span></span><br><span class="line">sudo resolvconf -u <span class="comment"># 更新DNS</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>arch</tag>
        <tag>pppoe</tag>
      </tags>
  </entry>
  <entry>
    <title>arch</title>
    <url>/2021/07/14/linux/arch/</url>
    <content><![CDATA[<h3 id="VPS-linux-to-arch"><a href="#VPS-linux-to-arch" class="headerlink" title="VPS linux to arch"></a>VPS linux to arch</h3><ul>
<li><h4 id="wiki"><a href="#wiki" class="headerlink" title="wiki"></a>wiki</h4><p>  <a href="https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers">https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers</a></p>
</li>
<li><h4 id="⚠️-设置root的密码"><a href="#⚠️-设置root的密码" class="headerlink" title="⚠️ 设置root的密码"></a>⚠️ 设置root的密码</h4></li>
<li><h4 id="wget-https-tinyurl-com-vps2arch-也会被重定向到以下-url"><a href="#wget-https-tinyurl-com-vps2arch-也会被重定向到以下-url" class="headerlink" title="wget https://tinyurl.com/vps2arch 也会被重定向到以下 url"></a>wget <a href="https://tinyurl.com/vps2arch">https://tinyurl.com/vps2arch</a> 也会被重定向到以下 url</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://gitlab.com/drizzt/vps2arch/-/raw/master/vps2arch</span><br></pre></td></tr></table></figure></li>
<li><h5 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh ./vps2arch</span><br></pre></td></tr></table></figure></li>
<li><h5 id="当你从脚本默认的源下载速度较慢的时候，可以使用-m-参数指定源，例如"><a href="#当你从脚本默认的源下载速度较慢的时候，可以使用-m-参数指定源，例如" class="headerlink" title="当你从脚本默认的源下载速度较慢的时候，可以使用 -m 参数指定源，例如"></a>当你从脚本默认的源下载速度较慢的时候，可以使用 -m 参数指定源，例如</h5></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(sudo) sh ./vps2arch -m https://mirrors.neusoft.edu.cn/archlinux/</span><br><span class="line">sync ; reboot -f</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用-ntp"><a href="#使用-ntp" class="headerlink" title="使用 ntp"></a>使用 ntp</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S ntp</span><br><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>

<h3 id="utf8"><a href="#utf8" class="headerlink" title="utf8"></a>utf8</h3><ul>
<li><h5 id="编辑-etc-locale-gen-取消一下行的注释（你可能需要一个编辑器，如-vim，请自行安装）"><a href="#编辑-etc-locale-gen-取消一下行的注释（你可能需要一个编辑器，如-vim，请自行安装）" class="headerlink" title="编辑 /etc/locale.gen 取消一下行的注释（你可能需要一个编辑器，如 vim，请自行安装）"></a>编辑 /etc/locale.gen 取消一下行的注释（你可能需要一个编辑器，如 vim，请自行安装）</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">en_GB.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br></pre></td></tr></table></figure>
<p>  执行 locale-gen</p>
<p>  创建 /etc/locale.conf 并编辑 LANG 这一 变量，比如：</p>
<p>  LANG=zh_CN.UTF-8</p>
</li>
</ul>
<h3 id="源设置"><a href="#源设置" class="headerlink" title="源设置"></a>源设置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">path : /etc/pacman.conf</span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>or </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China</span><br></pre></td></tr></table></figure>

<h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Rs $(pacman -Qsq fcitx)</span><br><span class="line"></span><br><span class="line">sudo pacman -S fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-chinese-addons</span><br><span class="line"></span><br><span class="line">vi ~/.xprofile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br><span class="line">fcitx5 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>arch</tag>
      </tags>
  </entry>
  <entry>
    <title>git &amp;&amp; ssh</title>
    <url>/2022/04/07/linux/git/</url>
    <content><![CDATA[<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><figure class="highlight sh"><figcaption><span>generate public key</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&quot;</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>git config</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># or vi ~/.gitconfig</span></span><br><span class="line">[http <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">  proxy = socks5://127.0.0.1:1080</span><br><span class="line">  postBuffer = 524288000</span><br><span class="line">[https <span class="string">&quot;https://github.com&quot;</span>]</span><br><span class="line">  proxy = socks5://127.0.0.1:1080</span><br><span class="line">  postBuffer = 524288000</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>git submodule</span></figcaption><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/liuyib/hexo-theme-stun/ themes/stun</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>

<h2 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config"></a>ssh config</h2><figure class="highlight sh"><figcaption><span>$HOME/.ssh/config</span></figcaption><table><tr><td class="code"><pre><span class="line">Host github</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   <span class="comment"># 走 HTTP 代理</span></span><br><span class="line">   <span class="comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080</span></span><br><span class="line">   <span class="comment"># 走 socks5 代理</span></span><br><span class="line">   ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Host archServer</span><br><span class="line">    HostName 192.168.xx.xx</span><br><span class="line">    User xxx</span><br><span class="line">    Port xxx</span><br><span class="line">    <span class="comment"># use ipv4</span></span><br><span class="line">    <span class="comment"># AddressFamily inet</span></span><br><span class="line">    IdentitiesOnly yes</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    ServerAliveInterval 120</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 转发跳板机端口</span></span><br><span class="line">ssh -tt -i ./id_rsa -L 0.0.0.0:local_port:host2:host2_port user@host1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传共钥到目标服务器</span></span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub archServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发服务器到本机的1082端口</span></span><br><span class="line">ssh -D 1082 -f -C -q -N archServer</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>neovim</title>
    <url>/2021/08/17/linux/neovim/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>我的neovim配置</span></figcaption><table><tr><td class="code"><pre><span class="line">https://github.com/hjkl01/init.vim</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight sh"><figcaption><span>status/tabline vim-airline/vim-airline >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#formatter = &#x27;default&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot; let g:airline#extensions#tabline#left_sep = &#x27; &#x27;</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#left_alt_sep = &#x27;|&#x27;</span></span><br><span class="line"><span class="string">&quot; let g:airline#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#tab_nr_type = 1 &quot; tab number</span></span><br><span class="line"><span class="string">&quot; let g:airline#extensions#tabline#show_tab_nr = 1</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#formatter = &#x27;default&#x27;</span></span><br><span class="line"><span class="string">&quot; let g:airline#extensions#tabline#buffer_nr_show = 0</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#fnametruncate = 16</span></span><br><span class="line"><span class="string">&quot; let g:airline#extensions#tabline#fnamecollapse = 2</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#buffer_idx_mode = 1</span></span><br><span class="line"><span class="built_in">let</span> g:airline_theme=<span class="string">&#x27;molokai&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>format file >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;Chiel92/vim-autoformat&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; autocmd BufWrite * :Autoformat</span></span><br><span class="line"><span class="string">let g:autoformat_autoindent = 1</span></span><br><span class="line"><span class="string">let g:autoformat_retab = 1</span></span><br><span class="line"><span class="string">let g:autoformat_remove_trailing_spaces = 1</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>文件目录 >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:NERDTreeWinPos = <span class="string">&quot;right&quot;</span></span><br><span class="line"><span class="built_in">let</span> NERDTreeShowHidden=1</span><br><span class="line"><span class="built_in">let</span> NERDTreeShowLineNumbers=1</span><br><span class="line"><span class="built_in">let</span> NERDTreeIgnore = [<span class="string">&#x27;\.pyc$&#x27;</span>, <span class="string">&#x27;__pycache__&#x27;</span>]</span><br><span class="line"><span class="built_in">let</span> g:NERDTreeWinSize=35</span><br><span class="line"><span class="built_in">let</span> g:NERDTreeDirArrows = 1</span><br><span class="line"><span class="string">&quot;当打开vim且没有文件时自动打开NERDTree</span></span><br><span class="line"><span class="string">&quot;</span> autocmd vimenter * <span class="keyword">if</span> !argc() | NERDTree | endif</span><br><span class="line"><span class="string">&quot;&quot;</span> 只剩 NERDTree时自动关闭</span><br><span class="line">autocmd bufenter * <span class="keyword">if</span> (winnr(<span class="string">&quot;$&quot;</span>) == 1 &amp;&amp; exists(<span class="string">&quot;b:NERDTree&quot;</span>) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br><span class="line"></span><br><span class="line">nmap &lt;Space&gt;n :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">nmap &lt;Space&gt;n &lt;ESC&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>nvim-tree.lua >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span> <span class="string">&quot; for file icons</span></span><br><span class="line"><span class="string">Plug &#x27;kyazdani42/nvim-tree.lua&#x27;</span></span><br><span class="line"><span class="string">autocmd BufEnter * ++nested if winnr(&#x27;$&#x27;) == 1 &amp;&amp; bufname() == &#x27;NvimTree_&#x27; . tabpagenr() | quit | endif</span></span><br><span class="line"><span class="string">    nnoremap &lt;Space&gt;n :NvimTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    lua &lt;&lt; EOF</span></span><br><span class="line"><span class="string">    require&#x27;nvim-tree&#x27;.setup &#123; -- BEGIN_DEFAULT_OPTS</span></span><br><span class="line"><span class="string">    auto_reload_on_write = true,</span></span><br><span class="line"><span class="string">    disable_netrw = false,</span></span><br><span class="line"><span class="string">    hide_root_folder = false,</span></span><br><span class="line"><span class="string">    hijack_cursor = false,</span></span><br><span class="line"><span class="string">    hijack_netrw = true,</span></span><br><span class="line"><span class="string">    hijack_unnamed_buffer_when_opening = false,</span></span><br><span class="line"><span class="string">    ignore_buffer_on_setup = false,</span></span><br><span class="line"><span class="string">    open_on_setup = true,</span></span><br><span class="line"><span class="string">      -- open_on_setup_file = true,</span></span><br><span class="line"><span class="string">    open_on_tab = true,</span></span><br><span class="line"><span class="string">    sort_by = &quot;</span>name<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    update_cwd = false,</span></span><br><span class="line"><span class="string">    view = &#123;</span></span><br><span class="line"><span class="string">        width = 30,</span></span><br><span class="line"><span class="string">        height = 30,</span></span><br><span class="line"><span class="string">        side = &quot;</span>right<span class="string">&quot;,</span></span><br><span class="line"><span class="string">        preserve_window_proportions = false,</span></span><br><span class="line"><span class="string">        number = true,</span></span><br><span class="line"><span class="string">        relativenumber = true,</span></span><br><span class="line"><span class="string">        signcolumn = &quot;</span>yes<span class="string">&quot;,</span></span><br><span class="line"><span class="string">        mappings = &#123;</span></span><br><span class="line"><span class="string">            custom_only = false,</span></span><br><span class="line"><span class="string">            list = &#123;</span></span><br><span class="line"><span class="string">                -- user mappings go here</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    renderer = &#123;</span></span><br><span class="line"><span class="string">        indent_markers = &#123;</span></span><br><span class="line"><span class="string">        enable = true,</span></span><br><span class="line"><span class="string">        icons = &#123;</span></span><br><span class="line"><span class="string">            corner = &quot;</span>└ <span class="string">&quot;,</span></span><br><span class="line"><span class="string">            edge = &quot;</span>│ <span class="string">&quot;,</span></span><br><span class="line"><span class="string">            none = &quot;</span>  <span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">hijack_directories = &#123;</span></span><br><span class="line"><span class="string">enable = true,</span></span><br><span class="line"><span class="string">auto_open = true,</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">      update_focused_file = &#123;</span></span><br><span class="line"><span class="string">      enable = false,</span></span><br><span class="line"><span class="string">      update_cwd = false,</span></span><br><span class="line"><span class="string">      ignore_list = &#123;&#125;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  ignore_ft_on_setup = &#123;&#125;,</span></span><br><span class="line"><span class="string">  system_open = &#123;</span></span><br><span class="line"><span class="string">      cmd = nil,</span></span><br><span class="line"><span class="string">      args = &#123;&#125;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  diagnostics = &#123;</span></span><br><span class="line"><span class="string">  enable = false,</span></span><br><span class="line"><span class="string">  show_on_dirs = false,</span></span><br><span class="line"><span class="string">  icons = &#123;</span></span><br><span class="line"><span class="string">      hint = &quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">      info = &quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">      warning = &quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">      error = &quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">      filters = &#123;</span></span><br><span class="line"><span class="string">          dotfiles = false,</span></span><br><span class="line"><span class="string">          custom = &#123;&#125;,</span></span><br><span class="line"><span class="string">          exclude = &#123;&#125;,</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">      git = &#123;</span></span><br><span class="line"><span class="string">      enable = true,</span></span><br><span class="line"><span class="string">      ignore = true,</span></span><br><span class="line"><span class="string">      timeout = 400,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  actions = &#123;</span></span><br><span class="line"><span class="string">      use_system_clipboard = true,</span></span><br><span class="line"><span class="string">      change_dir = &#123;</span></span><br><span class="line"><span class="string">      enable = true,</span></span><br><span class="line"><span class="string">      global = false,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  open_file = &#123;</span></span><br><span class="line"><span class="string">      quit_on_open = true,</span></span><br><span class="line"><span class="string">      resize_window = true,</span></span><br><span class="line"><span class="string">      window_picker = &#123;</span></span><br><span class="line"><span class="string">      enable = true,</span></span><br><span class="line"><span class="string">      chars = &quot;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890<span class="string">&quot;,</span></span><br><span class="line"><span class="string">      exclude = &#123;</span></span><br><span class="line"><span class="string">          filetype = &#123; &quot;</span>notify<span class="string">&quot;, &quot;</span>packer<span class="string">&quot;, &quot;</span>qf<span class="string">&quot;, &quot;</span>diff<span class="string">&quot;, &quot;</span>fugitive<span class="string">&quot;, &quot;</span>fugitiveblame<span class="string">&quot; &#125;,</span></span><br><span class="line"><span class="string">          buftype = &#123; &quot;</span>nofile<span class="string">&quot;, &quot;</span>terminal<span class="string">&quot;, &quot;</span><span class="built_in">help</span><span class="string">&quot; &#125;,</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  trash = &#123;</span></span><br><span class="line"><span class="string">      cmd = &quot;</span>trash<span class="string">&quot;,</span></span><br><span class="line"><span class="string">      require_confirm = true,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  log = &#123;</span></span><br><span class="line"><span class="string">  enable = false,</span></span><br><span class="line"><span class="string">  truncate = false,</span></span><br><span class="line"><span class="string">  types = &#123;</span></span><br><span class="line"><span class="string">      all = false,</span></span><br><span class="line"><span class="string">      config = false,</span></span><br><span class="line"><span class="string">      copy_paste = false,</span></span><br><span class="line"><span class="string">      git = false,</span></span><br><span class="line"><span class="string">      profile = false,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>注释 >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;preservim/nerdcommenter&#x27;</span> <span class="string">&quot; 注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">nmap &lt;Space&gt;&lt;Space&gt; &lt;plug&gt;NERDCommenterToggle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Add spaces after comment delimiters by default</span><br><span class="line"><span class="built_in">let</span> g:NERDSpaceDelims = 1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Use compact syntax for prettified multi-line comments</span></span><br><span class="line"><span class="string">let g:NERDCompactSexyComs = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Align line-wise comment delimiters flush left instead of following code indentation</span><br><span class="line"><span class="built_in">let</span> g:NERDDefaultAlign = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Set a language to use its alternate delimiters by default</span></span><br><span class="line"><span class="string">let g:NERDAltDelims_java = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Add your own custom formats or override the defaults</span><br><span class="line"><span class="string">&quot; let g:NERDCustomDelimiters = &#123; &#x27;c&#x27;: &#123; &#x27;left&#x27;: &#x27;/**&#x27;,&#x27;right&#x27;: &#x27;*/&#x27; &#125; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Allow commenting and inverting empty lines (useful when commenting a region)</span><br><span class="line"><span class="built_in">let</span> g:NERDCommentEmptyLines = 1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Enable trimming of trailing whitespace when uncommenting</span></span><br><span class="line"><span class="string">let g:NERDTrimTrailingWhitespace = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Enable NERDCommenterToggle to check all selected lines is commented or not</span><br><span class="line"><span class="built_in">let</span> g:NERDToggleCheckAllLines = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>other >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;nvim-lua/plenary.nvim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;nvim-telescope/telescope.nvim&#x27;</span></span><br><span class="line">nnoremap &lt;S-f&gt; &lt;cmd&gt;Telescope find_files&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;ntpeters/vim-better-whitespace&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;pechorin/any-jump.vim&#x27;</span></span><br><span class="line"><span class="string">&quot; Normal mode: Jump to definition under cursor</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;j :AnyJump&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> Visual mode: jump to selected text <span class="keyword">in</span> visual mode</span><br><span class="line">xnoremap &lt;leader&gt;j :AnyJumpVisual&lt;CR&gt;</span><br><span class="line"><span class="string">&quot; Normal mode: open previous opened file (after jump)</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;ab :AnyJumpBack&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> Normal mode: open last closed search window again</span><br><span class="line">nnoremap &lt;leader&gt;al :AnyJumpLastResults&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;voldikss/vim-floaterm&#x27;</span></span><br><span class="line">nmap &lt;Space&gt;t :FloatermNew&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;dense-analysis/ale&#x27;</span></span><br><span class="line"><span class="built_in">let</span> b:ale_linters = [<span class="string">&#x27;mypy&#x27;</span>]</span><br><span class="line"><span class="string">&quot; let b:ale_linters = [&#x27;flake8&#x27;, &#x27;pylint&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plug &#x27;gelguy/wilder.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;:UpdateRemotePlugins&#x27; &#125;</span></span><br><span class="line"><span class="string">call wilder#setup(&#123;&#x27;modes&#x27;: [&#x27;:&#x27;, &#x27;/&#x27;, &#x27;?&#x27;]&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call wilder#set_option(&#x27;pipeline&#x27;, [</span></span><br><span class="line"><span class="string">            \   wilder#branch(</span></span><br><span class="line"><span class="string">            \     wilder#cmdline_pipeline(),</span></span><br><span class="line"><span class="string">            \     wilder#search_pipeline(),</span></span><br><span class="line"><span class="string">            \   ),</span></span><br><span class="line"><span class="string">            \ ])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call wilder#set_option(&#x27;renderer&#x27;, wilder#wildmenu_renderer(&#123;</span></span><br><span class="line"><span class="string">            \ &#x27;highlighter&#x27;: wilder#basic_highlighter(),</span></span><br><span class="line"><span class="string">            \ &#125;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>code complete: lsp >folded</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;prabirshrestha/vim-lsp&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;mattn/vim-lsp-settings&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;prabirshrestha/asyncomplete.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;prabirshrestha/asyncomplete-lsp.vim&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>! s:on_lsp_buffer_enabled() abort</span><br><span class="line">    setlocal omnifunc=lsp<span class="comment">#complete</span></span><br><span class="line">    setlocal signcolumn=yes</span><br><span class="line">    <span class="keyword">if</span> exists(<span class="string">&#x27;+tagfunc&#x27;</span>) | setlocal tagfunc=lsp<span class="comment">#tagfunc | endif</span></span><br><span class="line">    nmap &lt;buffer&gt; gd &lt;plug&gt;(lsp-definition)</span><br><span class="line">    nmap &lt;buffer&gt; gs &lt;plug&gt;(lsp-document-symbol-search)</span><br><span class="line">    nmap &lt;buffer&gt; gS &lt;plug&gt;(lsp-workspace-symbol-search)</span><br><span class="line">    nmap &lt;buffer&gt; gr &lt;plug&gt;(lsp-references)</span><br><span class="line">    nmap &lt;buffer&gt; gi &lt;plug&gt;(lsp-implementation)</span><br><span class="line">    nmap &lt;buffer&gt; gt &lt;plug&gt;(lsp-type-definition)</span><br><span class="line">    nmap &lt;buffer&gt; &lt;leader&gt;rn &lt;plug&gt;(lsp-rename)</span><br><span class="line">    nmap &lt;buffer&gt; [g &lt;plug&gt;(lsp-previous-diagnostic)</span><br><span class="line">    nmap &lt;buffer&gt; ]g &lt;plug&gt;(lsp-next-diagnostic)</span><br><span class="line">    nmap &lt;buffer&gt; K &lt;plug&gt;(lsp-hover)</span><br><span class="line">    inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-f&gt; lsp<span class="comment">#scroll(+4)</span></span><br><span class="line">    inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-d&gt; lsp<span class="comment">#scroll(-4)</span></span><br><span class="line">    nmap &lt;Space&gt;f &lt;plug&gt;(lsp-document-format)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> g:lsp_document_highlight_enabled = 1</span><br><span class="line">    <span class="built_in">let</span> g:lsp_diagnostics_enabled = 1</span><br><span class="line">    <span class="built_in">let</span> g:lsp_format_sync_timeout = 1000</span><br><span class="line">    autocmd! BufWritePre *.go,*.py call execute(<span class="string">&#x27;LspDocumentFormatSync&#x27;</span>)</span><br><span class="line">    <span class="string">&quot; autocmd BufWritePre &lt;buffer&gt; LspDocumentFormatSync</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;</span> refer to doc to add more commands</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">augroup lsp_install</span><br><span class="line">    au!</span><br><span class="line">    <span class="string">&quot; call s:on_lsp_buffer_enabled only for languages that has the server registered.</span></span><br><span class="line"><span class="string">    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()</span></span><br><span class="line"><span class="string">augroup END</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plug &#x27;github/copilot.vim&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> :Copilot setup</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2021/09/02/linux/nginx/</url>
    <content><![CDATA[<h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx config"></a>nginx config</h2><h3 id="推荐在线配置"><a href="#推荐在线配置" class="headerlink" title="推荐在线配置"></a>推荐在线配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://www.digitalocean.com/community</span><br></pre></td></tr></table></figure>

<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name blog.viewer.pub;</span><br><span class="line">    root /html/github;</span><br><span class="line">    location / &#123;</span><br><span class="line">       index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转发端口"><a href="#转发端口" class="headerlink" title="转发端口"></a>转发端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name dj.viewer.pub;</span><br><span class="line"></span><br><span class="line">    root /html/www/;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.viewer.pub;</span><br><span class="line">    rewrite ^(.*)$ https://blog.viewer.pub; <span class="comment">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="https证书"><a href="#https证书" class="headerlink" title="https证书"></a>https证书</h3><h4 id="安装certbot"><a href="#安装certbot" class="headerlink" title="安装certbot"></a>安装certbot</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S --noconfirm certbot</span><br></pre></td></tr></table></figure>

<h4 id="静态文件-1"><a href="#静态文件-1" class="headerlink" title="静态文件"></a>静态文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo certbot certonly -d domain --webroot -w /html/filepath/</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name blog.viewer.pub;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/blog.viewer.pub/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/blog.viewer.pub/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate /etc/letsencrypt/live/blog.viewer.pub/chain.pem;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /html/github;  <span class="comment">#站点目录。</span></span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="转发端口-1"><a href="#转发端口-1" class="headerlink" title="转发端口"></a>转发端口</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo certbot certonly -d domain</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name nocodb.viewer.pub;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/nocodb.viewer.pub/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/nocodb.viewer.pub/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate /etc/letsencrypt/live/nocodb.viewer.pub/chain.pem;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转发mongo端口-TCP"><a href="#转发mongo端口-TCP" class="headerlink" title="转发mongo端口(TCP)"></a>转发mongo端口(TCP)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  &lt;your incoming Mongo TCP port&gt;;</span><br><span class="line">        proxy_connect_timeout 1s;</span><br><span class="line">        proxy_timeout 3s;</span><br><span class="line">        proxy_pass    stream_mongo_backend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream stream_mongo_backend &#123;</span><br><span class="line">      server &lt;localhost:your <span class="built_in">local</span> Mongo TCP port&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>socks5 转 http 之 privoxy</title>
    <url>/2021/07/14/linux/privoxy/</url>
    <content><![CDATA[<h2 id="socks5-转-http"><a href="#socks5-转-http" class="headerlink" title="socks5 转 http"></a>socks5 转 http</h2><h4 id="privoxy-配置"><a href="#privoxy-配置" class="headerlink" title="privoxy 配置"></a>privoxy 配置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S privoxy</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/privoxy</span><br><span class="line"></span><br><span class="line">(sudo) mv config config.bak</span><br><span class="line">(sudo) vi config</span><br><span class="line"></span><br><span class="line">forward-socks5t / 127.0.0.1:1080 .</span><br><span class="line">listen-address 127.0.0.1:9888</span><br><span class="line"></span><br><span class="line">sudo systemctl restart privoxy.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> privoxy.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>proxy</title>
    <url>/2021/07/17/linux/proxy/</url>
    <content><![CDATA[<h2 id="trojan-go"><a href="#trojan-go" class="headerlink" title="trojan-go"></a>trojan-go</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install trojan-go</span><br><span class="line"></span><br><span class="line">修改 /usr/<span class="built_in">local</span>/etc/trojan-go/config.json</span><br><span class="line"></span><br><span class="line">brew service start trojan-go</span><br></pre></td></tr></table></figure>

<h2 id="glider"><a href="#glider" class="headerlink" title="glider"></a><a href="https://github.com/nadoo/glider/blob/master/config/glider.conf.example">glider</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S glider</span><br><span class="line"></span><br><span class="line">glider -listen :1080 -forward trojan://password@ip:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># with auth</span></span><br><span class="line">glider -listen http://user:user_passwd@:61000 -forward trojan://password@ip:443</span><br></pre></td></tr></table></figure>

<h2 id="trojan"><a href="#trojan" class="headerlink" title="trojan"></a>trojan</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://github.com/trojan-gfw/trojan</span><br><span class="line"><span class="comment">### 机场推荐: https://portal.shadowsocks.nz/aff.php?aff=24252</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 部署 https://github.com/Jrohy/trojan</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="旧"><a href="#旧" class="headerlink" title="旧"></a>旧</h1><h2 id="server"><a href="#server" class="headerlink" title="server:"></a>server:</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">install libsodium</span><br><span class="line">pip install shadowsocks</span><br><span class="line">pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</span><br><span class="line"></span><br><span class="line"><span class="comment"># path : /etc/shadowsocks.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port_password&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;8000&quot;</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;chacha20-ietf-poly1305&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;pid-file&quot;</span>: <span class="string">&quot;/path/ss.pid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log-file&quot;</span>: <span class="string">&quot;/path/ss.log&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(sudo) ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">sudo ssserver -d stop</span><br><span class="line"></span><br><span class="line">https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E</span><br></pre></td></tr></table></figure>


<h4 id="开启bbr"><a href="#开启bbr" class="headerlink" title="开启bbr"></a>开启bbr</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"><span class="comment">#返回值一般为：</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br><span class="line"></span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br><span class="line"><span class="comment">#返回值一般为：</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_congestion_control = bbr</span></span><br><span class="line"></span><br><span class="line">sysctl net.core.default_qdisc</span><br><span class="line"><span class="comment">#返回值一般为：</span></span><br><span class="line"><span class="comment">#net.core.default_qdisc = fq</span></span><br><span class="line"></span><br><span class="line">lsmod | grep bbr</span><br><span class="line"><span class="comment">#返回值有 tcp_bbr 模块即说明bbr已启动。</span></span><br></pre></td></tr></table></figure>

<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><h4 id="ubuntu下使用，-Mac下载-https-github-com-shadowsocks-ShadowsocksX-NG-releases"><a href="#ubuntu下使用，-Mac下载-https-github-com-shadowsocks-ShadowsocksX-NG-releases" class="headerlink" title="ubuntu下使用， Mac下载 https://github.com/shadowsocks/ShadowsocksX-NG/releases/"></a>ubuntu下使用， Mac下载 <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/">https://github.com/shadowsocks/ShadowsocksX-NG/releases/</a></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line">path : ~/.shadowsocks/shadowsocks.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;server&quot;</span>:<span class="string">&quot;my_server_ip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;server_port&quot;</span>:my_server_port,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>:<span class="string">&quot;my_password&quot;</span>,</span><br><span class="line">  <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line">  <span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>:<span class="string">&quot;chacha20-ietf-poly1305&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fast_open&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;pid-file&quot;</span>: <span class="string">&quot;/path&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-file&quot;</span>: <span class="string">&quot;/path&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sslocal -c ~/.shadowsocks/shadowsocks.json -d start</span><br><span class="line">可先在系统设置里设置全局代理，在浏览器里安装 https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>samba</title>
    <url>/2021/07/17/linux/samba/</url>
    <content><![CDATA[<h3 id="在arch-中安装参考"><a href="#在arch-中安装参考" class="headerlink" title="在arch 中安装参考"></a>在arch 中安装参考</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://wiki.archlinux.org/title/samba</span><br></pre></td></tr></table></figure>

<h3 id="在ubuntu中安装"><a href="#在ubuntu中安装" class="headerlink" title="在ubuntu中安装"></a>在ubuntu中安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br><span class="line">sudo useradd xxx</span><br><span class="line">sudo smbpasswd -a xxx</span><br><span class="line">sudo vi /etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 配置内加入以下内容</span></span><br><span class="line">[dev]</span><br><span class="line">comment = dev</span><br><span class="line">path = /var/dev</span><br><span class="line">valid user = xxx</span><br><span class="line">write list = xxx</span><br><span class="line">create mask = 0664</span><br><span class="line">directory mask = 0775</span><br><span class="line">force user = xxx</span><br><span class="line">force group = xxx</span><br><span class="line">public = no</span><br><span class="line">available = yes</span><br><span class="line">browseable = yes</span><br><span class="line">security = user</span><br><span class="line"><span class="comment">### 重启samba【sudo service smbd restart】</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>starchart</title>
    <url>/2022/02/23/linux/starcharts/</url>
    <content><![CDATA[<h2 id="星图"><a href="#星图" class="headerlink" title="星图"></a>星图</h2><h3 id="在markdown中的代码"><a href="#在markdown中的代码" class="headerlink" title="在markdown中的代码:"></a>在markdown中的代码:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">![stars](https://starchart.cc/lesssound/pornhub.svg)</span><br></pre></td></tr></table></figure>

<h3 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h3><p><img src="https://starchart.cc/lesssound/pornhub.svg" alt="stars"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor</title>
    <url>/2021/07/17/linux/supervisor/</url>
    <content><![CDATA[<h4 id="后缀为conf或ini"><a href="#后缀为conf或ini" class="headerlink" title="后缀为conf或ini"></a>后缀为conf或ini</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[program:frp_ssh]</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>     = /home/user/frp/frpc -c /home/user/frp/config.ini </span><br><span class="line">directory = /home/user/somedir</span><br><span class="line">user = user</span><br><span class="line">autostart = <span class="literal">true</span></span><br><span class="line">autorestart = <span class="literal">true</span></span><br><span class="line">startsecs   = 3</span><br><span class="line"></span><br><span class="line">redirect_stderr         = <span class="literal">true</span></span><br><span class="line">stdout_logfile_maxbytes = 50MB</span><br><span class="line">stdout_logfile_backups  = 10</span><br><span class="line">stdout_logfile          = /home/user/frp/<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>远程桌面</title>
    <url>/2021/07/28/linux/todesk/</url>
    <content><![CDATA[<h4 id="arch-install-todesk"><a href="#arch-install-todesk" class="headerlink" title="arch install todesk"></a>arch install todesk</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dl.todesk.com/linux/todesk_2.0.2_x86_64.pkg.tar.zst</span><br><span class="line"></span><br><span class="line">sudo pacman -U todesk_2.0.2_x86_64.pkg.tar.zst</span><br><span class="line"></span><br><span class="line">sudo systemctl restart todeskd.service</span><br></pre></td></tr></table></figure>


<p>详情参考: <a href="https://www.todesk.com/download_detail.html">https://www.todesk.com/download_detail.html</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>remote desktop</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu</title>
    <url>/2021/06/17/linux/ubuntu/</url>
    <content><![CDATA[<h4 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install language-pack-zh-hans</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入 ~/.zshrc:</span></span><br><span class="line">LC_ALL=zh_CN.utf8</span><br><span class="line"><span class="built_in">export</span> LC_ALL</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>


<h4 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">path: `/etc/network/interface`</span><br><span class="line"></span><br><span class="line">auto eth1</span><br><span class="line">iface eth1 inet static</span><br><span class="line">address 192.168.56.xx</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">network 192.168.56.0</span><br><span class="line">broadcast 192.168.56.255</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> possible, 配置路由器中的dhcp.</span><br></pre></td></tr></table></figure>

<h4 id="ip-route"><a href="#ip-route" class="headerlink" title="ip route"></a>ip route</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo route add -net 66.1.254.0/24 gw 66.16.62.254 enp4s0</span><br><span class="line">sudo ip addr flush dev enp4s0</span><br></pre></td></tr></table></figure>

<h4 id="安装Ubuntu-分区"><a href="#安装Ubuntu-分区" class="headerlink" title="安装Ubuntu 分区"></a>安装Ubuntu 分区</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">efi</span><br><span class="line">swap	交换空间</span><br><span class="line">/ ext4</span><br><span class="line">/boot	200M左右	ext4	</span><br><span class="line">/tmp	5G左右	ext4	</span><br></pre></td></tr></table></figure>

<h4 id="手动配置swap内存"><a href="#手动配置swap内存" class="headerlink" title="手动配置swap内存"></a>手动配置swap内存</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo fallocate -l 4G /swapfile</span><br><span class="line">sudo chmod 600 /swapfile</span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"></span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line">/swapfile none swap sw 0 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>vnc</title>
    <url>/2021/07/17/linux/vnc/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>服务端安装</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ubuntu </span></span><br><span class="line">  sudo apt-get install x11vnc</span><br><span class="line"></span><br><span class="line">  x11vnc -storepasswd</span><br><span class="line"></span><br><span class="line">  x11vnc -auth guess -once -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -rfbport 5900 -shared</span><br><span class="line"></span><br><span class="line">  x11vnc -forever</span><br><span class="line"></span><br><span class="line">  https://www.realvnc.com/en/connect/download/viewer/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># arch </span></span><br><span class="line">    yay -S x11vnc net-tools</span><br><span class="line">    update -&gt; /etc/gdm/custom.conf:</span><br><span class="line">        WaylandEnable=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    x11vnc -<span class="built_in">wait</span> 50 -noxdamage -passwd PASSWORD -display :0 -forever -o /var/<span class="built_in">log</span>/x11vnc.log -<span class="built_in">bg</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>客户端</span></figcaption><table><tr><td class="code"><pre><span class="line">https://www.realvnc.com/</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>错误</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># display_server_not_supported</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/gdm3/custom.conf</span></span><br><span class="line">[daemon]</span><br><span class="line">    <span class="comment"># Enabling automatic login</span></span><br><span class="line">    AutomaticLoginEnable=<span class="literal">true</span></span><br><span class="line">    AutomaticLogin=<span class="variable">$USERNAME</span></span><br><span class="line">    </span><br><span class="line">sudo systemctl restart gdm.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>remote desktop</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Config &amp;&amp; Softwares</title>
    <url>/2021/07/27/mac/mac/</url>
    <content><![CDATA[<h3 id="刷新DNS"><a href="#刷新DNS" class="headerlink" title="刷新DNS"></a>刷新DNS</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure>

<h3 id="Mac终端录屏"><a href="#Mac终端录屏" class="headerlink" title="Mac终端录屏"></a>Mac终端录屏</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/icholy/ttygif</span></span><br><span class="line">brew install ttygif</span><br><span class="line">ttyrec myrecording</span><br><span class="line"></span><br><span class="line"><span class="comment"># On OSX optionally you can set a -f flag which will bypass cropping which is needed for terminal apps which aren&#x27;t full screen. Both standard Terminal and iTerm apps are supported.</span></span><br><span class="line">ttygif myrecording -f</span><br></pre></td></tr></table></figure>

<h3 id="在touch-bar-上显示歌词-LyricsX"><a href="#在touch-bar-上显示歌词-LyricsX" class="headerlink" title="在touch bar 上显示歌词-LyricsX"></a>在touch bar 上显示歌词-LyricsX</h3><p><a href="https://github.com/ddddxxx/LyricsX">https://github.com/ddddxxx/LyricsX</a></p>
<figure class="highlight sh"><figcaption><span>mtmr 配置 >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dnd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 38</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;brightnessDown&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;brightnessUp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dock&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 420</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;group&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Media&quot;</span>,</span><br><span class="line">        <span class="string">&quot;items&quot;</span>: [&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;brightnessDown&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 36</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;brightness&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 200,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="string">&quot;image&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;base64&quot;</span>: <span class="string">&quot;iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQMAAAD58POIAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAGUExURffLOPfLNyaSVzUAAAACdFJOU/kBxOqnWgAAAbJJREFUSMfVljtyhDAQBVulQCFH4CgcDR1NR9ERFBKoeA5GfGddtkNvwFINFKP5tED22+Zxwviv6QVKfIEc/iNoF5gkpLIeYI8SUp4PsAUJiekADQntF6isQjvxCTrhAJlFqMMBeIH9BMsD7DAb2BhvYbIyNAOCZIWqYKGTpDZJFQu9EKVd44RxQRq3IrULWD62C8wSssWUZEsR0k6wcDOrJZmoBpMKI+s5qkBQCQOUJADVOECdOsDS0gDbsgHMfT4rVwHSrZQFIN5ABka8BgDgAeZ+BztBgvUEnSgVlhNsTFJjvoF5HAZorBpdYKAiSRbqNyBIUr6AjZMdPwO72R40MElS+wZUWA+wQ6LAYkFvdIhkmA+wQSDDdIAGAZ6A34H0x0fca11gBZZsIHSIfnE/5+NjCn/OuiuUB+/aunZwDeNayjXdTpDN0wlY+r1PfWu75nfj8RogN2JuCN2Y5qgMwTI0wGPUnQw6Qarx0sVNKA5Mn6VUL22lIbZoYitDbPmlvocc9Umfl2D7adz1reC3pF8av4m+DCenp/ndZuG3E7fhuC3pH2+vnz8V3MfE+bnxBTXuuIMTrLWHAAAAAElFTkSuQmCC&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;brightnessUp&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 36</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;volumeDown&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 36</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 200,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;volumeUp&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="string">&quot;width&quot;</span>: 36</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;previous&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;play&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;next&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;displaySleep&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 20,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;weather&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="string">&quot;icon_type&quot;</span>: <span class="string">&quot;images&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;ca93a0bb8cdb428552660d83249e4bc9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;play&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: 38</span><br><span class="line">    &#125;,</span><br><span class="line">    // &#123;</span><br><span class="line">    //     <span class="string">&quot;type&quot;</span>: <span class="string">&quot;volumeDown&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    //     <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;width&quot;</span>: 28</span><br><span class="line">    // &#125;,</span><br><span class="line">    // &#123;</span><br><span class="line">    //     <span class="string">&quot;type&quot;</span>: <span class="string">&quot;volumeUp&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    //     <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;width&quot;</span>: 28</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;mute&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    // &#123;</span><br><span class="line">    //     <span class="string">&quot;type&quot;</span>: <span class="string">&quot;battery&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span></span><br><span class="line">    // &#125;,</span><br><span class="line">    // &#123;</span><br><span class="line">    //     <span class="string">&quot;type&quot;</span>: <span class="string">&quot;timeButton&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;formatTemplate&quot;</span>: <span class="string">&quot;HH:mm&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;bordered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    //     <span class="string">&quot;longAction&quot;</span>: <span class="string">&quot;shellScript&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;longExecutablePath&quot;</span>: <span class="string">&quot;/usr/bin/pmset&quot;</span>,</span><br><span class="line">    //     <span class="string">&quot;longShellArguments&quot;</span>: [<span class="string">&quot;sleepnow&quot;</span>]</span><br><span class="line">    // &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Oh My zsh + nvim 配置</title>
    <url>/2021/07/10/linux/zsh/</url>
    <content><![CDATA[<h3 id="install-git-make-neovim-python3"><a href="#install-git-make-neovim-python3" class="headerlink" title="install git, make, neovim, python3"></a>install git, make, neovim, python3</h3><figure class="highlight sh"><figcaption><span>直连GitHub</span></figcaption><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lesssound/dotfiles ~/.dotfiles</span><br><span class="line"><span class="built_in">cd</span> ~/.dotfiles </span><br><span class="line">make github </span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>国内镜像gitee</span></figcaption><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/lesssound/dotfiles ~/.dotfiles</span><br><span class="line"><span class="built_in">cd</span> ~/.dotfiles</span><br><span class="line">make gitee </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn_npm</title>
    <url>/2021/07/10/linux/yarn_npm/</url>
    <content><![CDATA[<h2 id="yarn-npm-设置国内源"><a href="#yarn-npm-设置国内源" class="headerlink" title="yarn/npm 设置国内源"></a>yarn/npm 设置国内源</h2><h3 id="临时"><a href="#临时" class="headerlink" title="临时"></a>临时</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>

<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry <span class="string">&#x27;https://registry.npm.taobao.org&#x27;</span></span><br><span class="line">yarn config get registry</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h4 id="use-yrm"><a href="#use-yrm" class="headerlink" title="use yrm"></a>use yrm</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g yrm</span><br><span class="line"><span class="comment"># yarn global add yrm</span></span><br><span class="line">yrm ls</span><br><span class="line">yrm use taobao</span><br><span class="line">yrm <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yarn npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2021/07/23/python/Django/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>在script中使用Django model</span></figcaption><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import django</span><br><span class="line">from proxyip.models import ProxyIP</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>] = <span class="string">&#x27;dj_project.settings&#x27;</span></span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">p = ProxyIP(ip=<span class="string">&#x27;192.168.50.1&#x27;</span>)</span><br><span class="line">p.save()</span><br><span class="line"><span class="built_in">print</span>(ProxyIP.objects.all())</span><br><span class="line"></span><br><span class="line">python manage.py shell &lt; main.py</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>django 导出导入数据</span></figcaption><table><tr><td class="code"><pre><span class="line">python manage.py dumpdata (myapp) &gt; myapp.json</span><br><span class="line"></span><br><span class="line">python manage.py loaddata myapp.json</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi demo</title>
    <url>/2021/07/17/python/fastapi/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>code >folded</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from fastapi import FastAPI</span><br><span class="line">from pydantic import BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.get(&quot;/&quot;)</span></span><br><span class="line">async def read_root():</span><br><span class="line">    <span class="built_in">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.get(&quot;/items/&#123;item_id&#125;&quot;)</span></span><br><span class="line">async def read_item(item_id: int, q: str = None):</span><br><span class="line">    <span class="built_in">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Item(BaseModel):</span><br><span class="line">    name: str</span><br><span class="line">    description: str = None</span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.post(&quot;/items/&quot;)</span></span><br><span class="line">async def create_item(item: Item):</span><br><span class="line">    <span class="built_in">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_api_route(<span class="string">&quot;/&quot;</span>, read_root)</span><br><span class="line">app.add_api_route(<span class="string">&quot;/item/&#123;item_id&#125;&quot;</span>, read_item)</span><br><span class="line">app.add_api_route(<span class="string">&quot;/items/&quot;</span>, create_item, methods=[<span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&#x27;main:app&#x27;</span>, reload=True)</span><br><span class="line"><span class="comment"># gunicorn test:app -w 4 -k uvicorn.workers.UvicornWorker</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>databases</title>
    <url>/2021/07/17/python/databases/</url>
    <content><![CDATA[<h3 id="sqlalchemy"><a href="#sqlalchemy" class="headerlink" title="sqlalchemy"></a>sqlalchemy</h3><figure class="highlight sh"><figcaption><span>安装及导出model</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install psycopg2-binary</span></span><br><span class="line"><span class="comment"># sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>code >folded</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy import Column, String</span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line"></span><br><span class="line">db_string = <span class="string">&quot;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose&quot;</span></span><br><span class="line"></span><br><span class="line">db = create_engine(db_string)</span><br><span class="line">base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Film(base):</span><br><span class="line">    __tablename__ = <span class="string">&quot;films&quot;</span></span><br><span class="line"></span><br><span class="line">    title = Column(String, primary_key=True)</span><br><span class="line">    director = Column(String)</span><br><span class="line">    year = Column(String)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session = sessionmaker(db)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line">base.metadata.create_all(db)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create</span></span><br><span class="line">doctor_strange = Film(title=<span class="string">&quot;Doctor Strange&quot;</span>, director=<span class="string">&quot;Scott Derrickson&quot;</span>, year=<span class="string">&quot;2016&quot;</span>)</span><br><span class="line">session.add(doctor_strange)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read</span></span><br><span class="line">films = session.query(Film)</span><br><span class="line"><span class="keyword">for</span> film <span class="keyword">in</span> films:</span><br><span class="line">    <span class="built_in">print</span>(film.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update</span></span><br><span class="line">doctor_strange.title = <span class="string">&quot;Some2016Film&quot;</span></span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete</span></span><br><span class="line">session.delete(doctor_strange)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line">delete_obj = Shop.__table__.delete().<span class="built_in">where</span>(Shop.shop_cate.contains(<span class="string">&quot;m&quot;</span>))</span><br><span class="line">session.execute(delete_obj)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>databases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install &#x27;databases[aiomysql]&#x27; aiomysq</span></span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a database instance, and connect to it.</span></span><br><span class="line">from databases import Database</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def run():</span><br><span class="line">    db_url = <span class="string">&quot;mysql://user:passwd@host:port/db&quot;</span></span><br><span class="line">    database = Database(db_url)</span><br><span class="line">    <span class="comment">#  database = Database(&quot;sqlite+aiosqlite:///example.db&quot;)</span></span><br><span class="line">    await database.connect()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a table.</span></span><br><span class="line">    <span class="comment">#  query = &quot;&quot;&quot;CREATE TABLE HighScores (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), score INTEGER)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#  await database.execute(query=query)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Insert some data.</span></span><br><span class="line">    query = <span class="string">&quot;INSERT INTO HighScores(name, score) VALUES (:name, :score)&quot;</span></span><br><span class="line">    values = [</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Daisy&quot;</span>, <span class="string">&quot;score&quot;</span>: 92&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Neil&quot;</span>, <span class="string">&quot;score&quot;</span>: 87&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;score&quot;</span>: 43&#125;,</span><br><span class="line">    ]</span><br><span class="line">    await database.execute_many(query=query, values=values)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run a database query.</span></span><br><span class="line">    query = <span class="string">&quot;SELECT * FROM HighScores&quot;</span></span><br><span class="line">    rows = await database.fetch_all(query=query)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;High Scores:&quot;</span>, rows)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="built_in">return</span> rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(run())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>python send mail</title>
    <url>/2021/08/17/python/fastapi_mail/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>fastapi send mail API</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import uvicorn</span><br><span class="line">from fastapi import FastAPI, BackgroundTasks, UploadFile, File, Form</span><br><span class="line">from starlette.responses import JSONResponse</span><br><span class="line">from fastapi_mail import FastMail, MessageSchema, ConnectionConfig</span><br><span class="line">from pydantic import BaseModel, EmailStr</span><br><span class="line">from typing import List, Text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EmailSchema(BaseModel):</span><br><span class="line">    email: List[EmailStr]</span><br><span class="line">    html: Text</span><br><span class="line"></span><br><span class="line">conf = ConnectionConfig(</span><br><span class="line">	<span class="comment"># update username, password, from</span></span><br><span class="line">    <span class="comment"># example qq mail</span></span><br><span class="line">    <span class="comment"># https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span></span><br><span class="line">    MAIL_USERNAME=<span class="string">&quot;qq123456&quot;</span>,</span><br><span class="line">    MAIL_PASSWORD=<span class="string">&quot;password&quot;</span>,</span><br><span class="line">    MAIL_FROM=<span class="string">&quot;qq123456@qq.com&quot;</span>,</span><br><span class="line">    MAIL_PORT=587,</span><br><span class="line">    MAIL_SERVER=<span class="string">&quot;smtp.qq.com&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    MAIL_TLS=True,</span><br><span class="line">    MAIL_SSL=False,</span><br><span class="line">    USE_CREDENTIALS=True,</span><br><span class="line">    VALIDATE_CERTS=True,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&lt;p&gt;Thanks for using Fastapi-mail&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.post(<span class="string">&quot;/email&quot;</span>)</span><br><span class="line">async def simple_send(email: EmailSchema) -&gt; JSONResponse:</span><br><span class="line"></span><br><span class="line">    message = MessageSchema(</span><br><span class="line">        subject=<span class="string">&quot;Fastapi-Mail module&quot;</span>,</span><br><span class="line">        recipients=email.dict().get(</span><br><span class="line">            <span class="string">&quot;email&quot;</span></span><br><span class="line">        ),  <span class="comment"># List of recipients, as many as you can pass</span></span><br><span class="line">        body=email.dict().get(<span class="string">&quot;html&quot;</span>, html),</span><br><span class="line">        subtype=<span class="string">&quot;html&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fm = FastMail(conf)</span><br><span class="line">    await fm.send_message(message)</span><br><span class="line">    <span class="built_in">return</span> JSONResponse(status_code=200, content=&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;email has been sent&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.post(<span class="string">&quot;/file&quot;</span>)</span><br><span class="line">async def send_file(</span><br><span class="line">    background_tasks: BackgroundTasks,</span><br><span class="line">    file: UploadFile = File(...),</span><br><span class="line">    email: EmailStr = Form(...),</span><br><span class="line">) -&gt; JSONResponse:</span><br><span class="line"></span><br><span class="line">    message = MessageSchema(</span><br><span class="line">        subject=<span class="string">&quot;Fastapi mail module&quot;</span>,</span><br><span class="line">        recipients=[email],</span><br><span class="line">        body=<span class="string">&quot;Simple background task &quot;</span>,</span><br><span class="line">        attachments=[file],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fm = FastMail(conf)</span><br><span class="line"></span><br><span class="line">    background_tasks.add_task(fm.send_message, message)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> JSONResponse(status_code=200, content=&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;email has been sent&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&#x27;main:app&#x27;</span>, reload=True, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=8000)</span><br><span class="line">    <span class="comment"># https://sabuhish.github.io/fastapi-mail/example/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>yagmail</span></figcaption><table><tr><td class="code"><pre><span class="line">import yagmail</span><br><span class="line"></span><br><span class="line">username = <span class="string">&quot;xxx@qq.com&quot;</span></span><br><span class="line">password = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">host = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">mail = yagmail.SMTP(user=username, password=password, host=host)</span><br><span class="line"></span><br><span class="line">mail.send(to=username, subject=<span class="string">&quot;这是主题&quot;</span>, contents=[<span class="string">&quot;这是内容&quot;</span>, r<span class="string">&quot;./logs/1695814_1.png&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finish !&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>fastapi</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter</title>
    <url>/2021/07/17/python/jupyter/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>python jupyter 安装</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># jupyter config</span></span><br><span class="line">pip install jupyter</span><br><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>设置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipython</span></span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">jupyter notebook password</span><br><span class="line"></span><br><span class="line">vim ~/.jupyter/jupyter_notebook_config.py </span><br><span class="line"></span><br><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">&#x27;&#x27;</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port = 8000</span><br><span class="line"></span><br><span class="line">jupyter notebook</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>启动多个jupyter服务 >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import secrets</span><br><span class="line"></span><br><span class="line">import yaml</span><br><span class="line">from rich import <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ConfigMeta:</span><br><span class="line">    def __init__(self, _file=<span class="string">&quot;config.yaml&quot;</span>):</span><br><span class="line">        self.file = _file</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        with open(self.file, <span class="string">&quot;r&quot;</span>) as file:</span><br><span class="line">            self.con = yaml.safe_load(file)</span><br><span class="line">        result = self.con.get(key)</span><br><span class="line">        <span class="built_in">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Config = ConfigMeta()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_password():</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1, 9):</span><br><span class="line">        temp = &#123;&#125;</span><br><span class="line">        temp[<span class="string">&quot;port&quot;</span>] = 9120 + i</span><br><span class="line">        temp[<span class="string">&quot;dirname&quot;</span>] = f<span class="string">&quot;njrd_venv_&#123;9120+i&#125;&quot;</span></span><br><span class="line">        temp[<span class="string">&quot;password&quot;</span>] = secrets.token_urlsafe(32)</span><br><span class="line">        result.append(temp)</span><br><span class="line"></span><br><span class="line">    with open(<span class="string">&quot;config.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) as file:</span><br><span class="line">        yaml.dump(&#123;<span class="string">&quot;config&quot;</span>: result&#125;, file, allow_unicode=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def stop_old_jupyter():</span><br><span class="line">    cmd = <span class="string">&quot;ps aux | grep jupyter&quot;</span></span><br><span class="line">    temp = os.popen(cmd)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> temp:</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        ppid = re.findall(<span class="string">&quot;\d+&quot;</span>, t)[0]</span><br><span class="line">        cmd = f<span class="string">&quot;kill -9 &#123;ppid&#125;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line">        os.system(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Config.config)</span><br><span class="line">    <span class="keyword">for</span> con <span class="keyword">in</span> Config.config:</span><br><span class="line">        dirname = con[<span class="string">&quot;dirname&quot;</span>]</span><br><span class="line">        port = con[<span class="string">&quot;port&quot;</span>]</span><br><span class="line">        password = con[<span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(f<span class="string">&quot;./&#123;dirname&#125;&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(f<span class="string">&quot;exists &#123;dirname&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds = [</span><br><span class="line">                f<span class="string">&quot;/usr/bin/python3.6 -m venv &#123;dirname&#125;/.venv&quot;</span>,</span><br><span class="line">                f<span class="string">&quot;&#123;dirname&#125;/.venv/bin/pip install --upgrade pip&quot;</span>,</span><br><span class="line">                f<span class="string">&quot;&#123;dirname&#125;/.venv/bin/pip install jupyter &quot;</span>,</span><br><span class="line">            ]</span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> cmds:</span><br><span class="line">                <span class="built_in">print</span>(cmd)</span><br><span class="line">                os.system(cmd)</span><br><span class="line"></span><br><span class="line">        cmd = f<span class="string">&quot;source &#123;dirname&#125;/.venv/bin/activate &amp;&amp; nohup &#123;dirname&#125;/.venv/bin/jupyter notebook --ip=&#x27;*&#x27; --port=&#x27;&#123;port&#125;&#x27; --notebook-dir=&#x27;&#123;dirname&#125;&#x27; --NotebookApp.token=&#x27;&#123;password&#125;&#x27; --NotebookApp.password=&#x27;&#123;password&#125;&#x27; &gt;&gt; /dev/null 2&gt;&amp;1 &amp; &quot;</span></span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line">        os.system(cmd)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># generate_password()</span></span><br><span class="line">    stop_old_jupyter()</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>mitmproxy</title>
    <url>/2022/03/28/python/mitmproxy/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>install</span></figcaption><table><tr><td class="code"><pre><span class="line">pip install mitmproxy</span><br><span class="line"><span class="comment"># open mitm.it after set proxy</span></span><br><span class="line">mitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>http.HTTPFlow 实例 flow</span></figcaption><table><tr><td class="code"><pre><span class="line">flow.request.headers <span class="comment">#获取所有头信息，包含Host、User-Agent、Content-type等字段</span></span><br><span class="line">flow.request.url <span class="comment">#完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数</span></span><br><span class="line">flow.request.pretty_url <span class="comment">#同flow.request.url目前没看出什么差别</span></span><br><span class="line">flow.request.host <span class="comment">#域名</span></span><br><span class="line">flow.request.method <span class="comment">#请求方式。POST、GET等</span></span><br><span class="line">flow.request.scheme <span class="comment">#什么请求 ，如https</span></span><br><span class="line">flow.request.path <span class="comment"># 请求的路径，url除域名之外的内容</span></span><br><span class="line">flow.request.get_text() <span class="comment">#请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型</span></span><br><span class="line">flow.request.query <span class="comment">#返回MultiDictView类型的数据，url直接带的键值参数</span></span><br><span class="line">flow.request.get_content()<span class="comment">#bytes,结果如flow.request.get_text()</span></span><br><span class="line">flow.request.raw_content <span class="comment">#bytes,结果如flow.request.get_content()</span></span><br><span class="line">flow.request.urlencoded_form <span class="comment">#MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数</span></span><br><span class="line">flow.request.multipart_form <span class="comment">#MultiDictView，content-type：multipart/form-data</span></span><br><span class="line">时的请求参数，不包含url直接带的键值参数</span><br><span class="line"></span><br><span class="line">以上均为获取request信息的一些常用方法，对于response，同理</span><br><span class="line">flow.response.status_code <span class="comment">#状态码</span></span><br><span class="line">flow.response.text<span class="comment">#返回内容，已解码</span></span><br><span class="line">flow.response.content <span class="comment">#返回内容，二进制</span></span><br><span class="line">flow.response.setText()<span class="comment">#修改返回内容，不需要转码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>example</span></figcaption><table><tr><td class="code"><pre><span class="line">def response(flow):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;some url&quot;</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Request: &#123;&#125;&quot;</span>.format(flow.request.url))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Response: &#123;&#125;&quot;</span>.format(flow.response.text))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo</title>
    <url>/2021/09/23/python/mongo/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>MongoDB 语法 >folded</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># db.users.find(&#123; create_at: &#123; $exists: true &#125; &#125;) </span></span><br><span class="line"><span class="comment"># db.users.find() select * from users</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;age&quot; : 27&#125;) select * from users where age = 27</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;username&quot; : &quot;joe&quot;, &quot;age&quot; : 27&#125;) select * from users where &quot;username&quot; = &quot;joe&quot; and age = 27</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&#125;, &#123;&quot;username&quot; : 1, &quot;email&quot; : 1&#125;) select username, email from users</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&#125;, &#123;&quot;username&quot; : 1, &quot;_id&quot; : 0&#125;) // no case  // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;age&quot; : &#123;&quot;$gte&quot; : 18, &quot;$lte&quot; : 30&#125;&#125;) select * from users where age &gt;=18 and age &lt;= 30 // $lt(&lt;) $lte(&lt;=) $gt(&gt;) $gte(&gt;=)</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;username&quot; : &#123;&quot;$ne&quot; : &quot;joe&quot;&#125;&#125;) select * from users where username &lt;&gt; &quot;joe&quot;</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;ticket_no&quot; : &#123;&quot;$in&quot; : [725, 542, 390]&#125;&#125;) select * from users where ticket_no in (725, 542, 390)</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;ticket_no&quot; : &#123;&quot;$nin&quot; : [725, 542, 390]&#125;&#125;) select * from users where ticket_no not in (725, 542, 390)</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;$or&quot; : [&#123;&quot;ticket_no&quot; : 725&#125;, &#123;&quot;winner&quot; : true&#125;]&#125;) select * form users where ticket_no = 725 or winner = true</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;id_num&quot; : &#123;&quot;$mod&quot; : [5, 1]&#125;&#125;) select * from users where (id_num mod 5) = 1</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;$not&quot;: &#123;&quot;age&quot; : 27&#125;&#125;) select * from users where not (age = 27)</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;username&quot; : &#123;&quot;$in&quot; : [null], &quot;$exists&quot; : true&#125;&#125;) select * from users where username is null // 如果直接通过find(&#123;&quot;username&quot; : null&#125;)进行查询，那么连带&quot;没有username&quot;的纪录一并筛选出来</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;&quot;name&quot; : /joey?/i&#125;) // 正则查询，value是符合PCRE的表达式</span></span><br><span class="line"><span class="comment"># db.food.find(&#123;fruit : &#123;$all : [&quot;apple&quot;, &quot;banana&quot;]&#125;&#125;) // 对数组的查询, 字段fruit中，既包含&quot;apple&quot;,又包含&quot;banana&quot;的纪录</span></span><br><span class="line"><span class="comment"># db.food.find(&#123;&quot;fruit.2&quot; : &quot;peach&quot;&#125;) // 对数组的查询, 字段fruit中，第3个(从0开始)元素是peach的纪录</span></span><br><span class="line"><span class="comment"># db.food.find(&#123;&quot;fruit&quot; : &#123;&quot;$size&quot; : 3&#125;&#125;) // 对数组的查询, 查询数组元素个数是3的记录，$size前面无法和其他的操作符复合使用</span></span><br><span class="line"><span class="comment"># db.users.findOne(criteria, &#123;&quot;comments&quot; : &#123;&quot;$slice&quot; : 10&#125;&#125;) // 对数组的查询，只返回数组comments中的前十条，还可以&#123;&quot;$slice&quot; : -10&#125;， &#123;&quot;$slice&quot; : [23, 10]&#125;; 分别返回最后10条，和中间10条</span></span><br><span class="line"><span class="comment"># db.people.find(&#123;&quot;name.first&quot; : &quot;Joe&quot;, &quot;name.last&quot; : &quot;Schmoe&quot;&#125;)  // 嵌套查询</span></span><br><span class="line"><span class="comment"># db.blog.find(&#123;&quot;comments&quot; : &#123;&quot;$elemMatch&quot; : &#123;&quot;author&quot; : &quot;joe&quot;, &quot;score&quot; : &#123;&quot;$gte&quot; : 5&#125;&#125;&#125;&#125;) // 嵌套查询，仅当嵌套的元素是数组时使用,</span></span><br><span class="line"><span class="comment"># db.foo.find(&#123;&quot;$where&quot; : &quot;this.x + this.y == 10&quot;&#125;) // 复杂的查询，$where当然是非常方便的，但效率低下。对于复杂查询，考虑的顺序应当是 正则 -&gt; MapReduce -&gt; $where</span></span><br><span class="line"><span class="comment"># db.foo.find(&#123;&quot;$where&quot; : &quot;function() &#123; return this.x + this.y == 10; &#125;&quot;&#125;) // $where可以支持javascript函数作为查询条件</span></span><br><span class="line"><span class="comment"># db.foo.find().sort(&#123;&quot;x&quot; : 1&#125;).limit(1).skip(10); // 返回第(10, 11]条，按&quot;x&quot;进行排序; 三个limit的顺序是任意的，应该尽量避免skip中使用large-number</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>Mac上导出MongoDB数据</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mac install mongo tools</span></span><br><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-database-tools</span><br><span class="line"><span class="comment"># in arch: yay -S --noconfirm mongodb-tools-bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## export</span></span><br><span class="line">mongoexport --host 127.0.0.1:27017 -u user -p passwd --authenticationDatabase admin --db dbname -c cname --forceTableScan  -o res.json</span><br><span class="line">mongoexport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection -o result.json</span><br><span class="line"><span class="comment">## import</span></span><br><span class="line">mongoimport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection --file=result.json</span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>Python 调用 MongoDB >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">def connect_mongo(uri, db, tablename):</span><br><span class="line">    myclient = pymongo.MongoClient(uri)</span><br><span class="line">    mydb = myclient[db]</span><br><span class="line">    mycol = mydb[tablename]</span><br><span class="line">    <span class="built_in">return</span> mycol, myclient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MongoAPI:</span><br><span class="line">    def __init__(self, db=<span class="string">&quot;db&quot;</span>, tablename=<span class="string">&quot;tablename&quot;</span>):</span><br><span class="line">        self.uri = “mongodb://user:password@host:27017/”</span><br><span class="line">        self.myclient = pymongo.MongoClient(self.uri)</span><br><span class="line">        mydb = self.myclient[db]</span><br><span class="line">        self.mycol = mydb[tablename]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># values = &#123;&quot;abr&quot;: 1&#125;</span></span><br><span class="line">    def query(self, myquery=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;somename&quot;</span>&#125;, values=None, _limit=10):</span><br><span class="line">    	<span class="keyword">if</span> _limit:</span><br><span class="line">            result = [q <span class="keyword">for</span> q <span class="keyword">in</span> self.mycol.find(query, values).<span class="built_in">limit</span>(_limit)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = [q <span class="keyword">for</span> q <span class="keyword">in</span> self.mycol.find(query, values)]</span><br><span class="line">        <span class="built_in">return</span> result</span><br><span class="line"></span><br><span class="line">    def save(self, data):</span><br><span class="line">        try:</span><br><span class="line">            self.mycol.insert_one(data)</span><br><span class="line">            <span class="built_in">return</span> True</span><br><span class="line">        except Exception as err:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;duplicate key error collection&quot;</span> <span class="keyword">in</span> str(err):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;saved &quot;</span>, data[<span class="string">&quot;_id&quot;</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(err)</span><br><span class="line">                <span class="built_in">return</span> False</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  myquery = &#123;&quot;asin&quot;: &quot;B07K36J4VP&quot;&#125;</span></span><br><span class="line">    <span class="comment">#  myquery = &#123; &quot;name&quot;: &#123; &quot;$regex&quot;: &quot;^F&quot; &#125; &#125;</span></span><br><span class="line">    <span class="comment">#  newvalues = &#123;&quot;$set&quot;: &#123;&quot;comments&quot;: &quot;values&quot;&#125;&#125;</span></span><br><span class="line">    def update(self, myquery, newvalues):</span><br><span class="line">        self.mycol.update_one(myquery, newvalues, upsert=False)</span><br><span class="line">        logger.info(f<span class="string">&quot;update success &#123;myquery&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line">    def quit(self):</span><br><span class="line">        self.myclient.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>multiprocessing</title>
    <url>/2021/07/17/python/multiprocessing/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>code</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def f(msg):</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="built_in">return</span> multiprocessing.current_process().name + <span class="string">&#x27;-&#x27;</span> + msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func1():</span><br><span class="line">    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line">        msg = <span class="string">&quot;hello %d&quot;</span> % (i)</span><br><span class="line">        results.append(pool.apply_async(f, (msg, )))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sub-process(es) done.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(res.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func2():</span><br><span class="line">    from multiprocessing import Pool</span><br><span class="line">    <span class="comment"># with Pool(5) as p:</span></span><br><span class="line">    with Pool(processes=multiprocessing.cpu_count()) as p:</span><br><span class="line">        <span class="built_in">print</span>(p.map(f, [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(9)]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># func1()</span></span><br><span class="line">    func2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ocr</title>
    <url>/2021/07/17/python/ocr/</url>
    <content><![CDATA[<h3 id="https-github-com-breezedeus-cnocr"><a href="#https-github-com-breezedeus-cnocr" class="headerlink" title="https://github.com/breezedeus/cnocr"></a><a href="https://github.com/breezedeus/cnocr">https://github.com/breezedeus/cnocr</a></h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>ocr</tag>
      </tags>
  </entry>
  <entry>
    <title>Pip</title>
    <url>/2021/07/10/python/pip/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>code</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># virtualenv </span></span><br><span class="line">(sudo) pip install virtualenv</span><br><span class="line">virtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3</span><br><span class="line"><span class="comment"># pip freeze &gt; requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pipenv</span></span><br><span class="line"><span class="built_in">alias</span> pv=<span class="string">&#x27;pipenv run python&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> pi=<span class="string">&#x27;pipenv run pip install &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip.conf</span></span><br><span class="line"></span><br><span class="line">- <span class="comment">### 一次</span></span><br><span class="line">pip install web.py -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line">- <span class="comment">### 全局</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment"># 腾讯源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url http://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line"><span class="comment"># 豆瓣源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url http://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="comment"># linux:`~/.pip/pip.conf`</span></span><br><span class="line"><span class="comment"># windows:`%HOMEPATH%\pip\pip.ini）`</span></span><br><span class="line">[global]</span><br><span class="line">  index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">  trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># locale.Error: unsupported locale setting</span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=C</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2021/06/17/python/python/</url>
    <content><![CDATA[<figure class="highlight python"><figcaption><span>code</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># mysql-clients</span></span><br><span class="line">yay -S --noconfirm mysql-clients gcc</span><br><span class="line">pip install mysqlclient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">json.dumps(item, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典排序</span></span><br><span class="line"><span class="built_in">sorted</span>(_<span class="built_in">dict</span>.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unicode replace</span></span><br><span class="line"><span class="built_in">repr</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># http server</span></span><br><span class="line">py2 python -m SimpleHTTPServer <span class="number">8000</span></span><br><span class="line">py3 python -m http.server <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:02d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1</span>:02d&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime</span></span><br><span class="line">pip install python-dateutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> parser</span><br><span class="line"></span><br><span class="line">format_time = datetime.now().strftime(<span class="string">&quot;%m/%d/%Y, %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">t = <span class="string">&quot;Thu, 9 Sep 2021 00:17:59&quot;</span></span><br><span class="line">result = parser.parse(t)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>((now - result).days)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> arrow</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">&#x27;2013-05-11T21:23:58.970460+07:00&#x27;</span>)</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = arrow.utcnow()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = utc.shift(hours=-<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T20:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local = utc.to(<span class="string">&#x27;US/Pacific&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T13:<span class="number">23</span>:<span class="number">58.970460</span>-07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.timestamp()</span><br><span class="line"><span class="number">1368303838.970460</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>()</span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss ZZ&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize()</span><br><span class="line"><span class="string">&#x27;an hour ago&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize(locale=<span class="string">&#x27;ko-kr&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;한시간 전&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read big file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">        do_something_with(line)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># csv</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">result = []</span><br><span class="line">input_file = csv.DictReader(<span class="built_in">open</span>(<span class="string">&quot;result.csv&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> input_file:</span><br><span class="line">    result.append(row)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># write dict</span></span><br><span class="line">my_dict = &#123;<span class="string">&quot;test&quot;</span>: <span class="number">1</span>, <span class="string">&quot;testing&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mycsvfile.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8-sig&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># You will need &#x27;wb&#x27; mode in Python 2.x</span></span><br><span class="line">    w = csv.DictWriter(f, my_dict.keys())</span><br><span class="line">    w.writeheader()</span><br><span class="line">    w.writerow(my_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write list</span></span><br><span class="line">result = [&#123;<span class="string">&quot;test&quot;</span>: <span class="number">1</span>, <span class="string">&quot;testing&quot;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&quot;test&quot;</span>: <span class="number">1</span>, <span class="string">&quot;testing&quot;</span>: <span class="number">2</span>&#125;]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mycsvfile.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8-sig&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># You will need &#x27;wb&#x27; mode in Python 2.x</span></span><br><span class="line">    w = csv.DictWriter(f, result[<span class="number">0</span>].keys())</span><br><span class="line">    w.writeheader()</span><br><span class="line">    w.writerows(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># xmljson</span></span><br><span class="line"><span class="keyword">import</span> xmljson</span><br><span class="line"><span class="keyword">from</span> lxml.etree <span class="keyword">import</span>  fromstring,tostring</span><br><span class="line"></span><br><span class="line">json.loads(json.dumps(xmljson.badgerfish.data(fromstring(con.encode()))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法表 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;%s*%s=%-2s&#x27;</span> % (y,x,x*y) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,x+<span class="number">1</span>)]) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>settings</title>
    <url>/2021/07/17/python/settings/</url>
    <content><![CDATA[<figure class="highlight python"><figcaption><span>code >folded</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install python-dotenv pyyaml loguru</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> toml</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(<span class="string">&quot;/common&quot;</span>)</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR, <span class="string">&quot;logs/stdout.log&quot;</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR, <span class="string">&quot;logs/error.log&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.add(</span><br><span class="line">    log_file_path,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;&#123;process&#125; &#123;thread&#125; &#123;time:YYYY.MM.DD HH.mm.ss&#125; &#123;level&#125;.&#123;file&#125;.&#123;name&#125;.&#123;module&#125;.&#123;line&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">    rotation=<span class="string">&quot;100 MB&quot;</span>,</span><br><span class="line">    colorize=<span class="literal">True</span>,</span><br><span class="line">    enqueue=<span class="literal">True</span>,</span><br><span class="line">    backtrace=<span class="literal">True</span>,</span><br><span class="line">    diagnose=<span class="literal">True</span>,</span><br><span class="line">    level=<span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">)</span><br><span class="line">logger.add(</span><br><span class="line">    err_log_file_path,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;&#123;time:YYYY.MM.DD HH.mm.ss&#125; &#123;level&#125;.&#123;file&#125;.&#123;name&#125;.&#123;module&#125;.&#123;line&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">    rotation=<span class="string">&quot;100 MB&quot;</span>,</span><br><span class="line">    level=<span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">    colorize=<span class="literal">True</span>,</span><br><span class="line">    enqueue=<span class="literal">True</span>,</span><br><span class="line">    backtrace=<span class="literal">True</span>,</span><br><span class="line">    diagnose=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingsMeta</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, _file=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.file = _file</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read config.yaml</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_yaml</span>(<span class="params">self, key, file=<span class="string">&quot;settings.yaml&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                con = yaml.safe_load(f)</span><br><span class="line">            <span class="keyword">if</span> con:</span><br><span class="line">                <span class="comment">#  logger.debug(con)</span></span><br><span class="line">                <span class="keyword">return</span> con.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read .secrets.toml</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_toml</span>(<span class="params">self, key, file=<span class="string">&quot;.secrets.toml&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">            con = toml.load(file)</span><br><span class="line">            <span class="keyword">if</span> con:</span><br><span class="line">                <span class="comment">#  logger.debug(con)</span></span><br><span class="line">                <span class="keyword">return</span> con.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read .env</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_env</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        load_dotenv()</span><br><span class="line">        <span class="keyword">return</span> os.getenv(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        result = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        file_function = &#123;</span><br><span class="line">            <span class="string">&quot;yaml&quot;</span>: self.read_yaml,</span><br><span class="line">            <span class="string">&quot;toml&quot;</span>: self.read_toml,</span><br><span class="line">            <span class="string">&quot;env&quot;</span>: self.read_env,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.file:</span><br><span class="line">            file_type = self.file.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">            func = file_function.get(file_type[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> func:</span><br><span class="line">                <span class="keyword">return</span> func(key)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        functions = [self.read_yaml, self.read_toml, self.read_env]</span><br><span class="line">        <span class="keyword">for</span> ft <span class="keyword">in</span> functions:</span><br><span class="line">            result = ft(key)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settings = SettingsMeta()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install dynaconf loguru</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> dynaconf <span class="keyword">import</span> Dynaconf</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(<span class="string">&quot;/common&quot;</span>)</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR, <span class="string">&quot;logs/stdout.log&quot;</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR, <span class="string">&quot;logs/error.log&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.add(</span><br><span class="line">    log_file_path,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;&#123;process&#125; &#123;thread&#125; &#123;time:YYYY.MM.DD HH.mm.ss&#125; &#123;level&#125;.&#123;file&#125;.&#123;name&#125;.&#123;module&#125;.&#123;line&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">    rotation=<span class="string">&quot;100 MB&quot;</span>,</span><br><span class="line">    colorize=<span class="literal">True</span>,</span><br><span class="line">    enqueue=<span class="literal">True</span>,</span><br><span class="line">    backtrace=<span class="literal">True</span>,</span><br><span class="line">    diagnose=<span class="literal">True</span>,</span><br><span class="line">    level=<span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">)</span><br><span class="line">logger.add(</span><br><span class="line">    err_log_file_path,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;&#123;time:YYYY.MM.DD HH.mm.ss&#125; &#123;level&#125;.&#123;file&#125;.&#123;name&#125;.&#123;module&#125;.&#123;line&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">    rotation=<span class="string">&quot;100 MB&quot;</span>,</span><br><span class="line">    level=<span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">    colorize=<span class="literal">True</span>,</span><br><span class="line">    enqueue=<span class="literal">True</span>,</span><br><span class="line">    backtrace=<span class="literal">True</span>,</span><br><span class="line">    diagnose=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Config = Dynaconf(settings_files=[<span class="string">&quot;.secrets.toml&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Config.__dict__)</span><br><span class="line"><span class="built_in">print</span>(Config.redis_ip)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>spider-selenium</title>
    <url>/2021/08/23/python/spider/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>代码示例</span></figcaption><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from time import sleep</span><br><span class="line">from bs4 import BeautifulSoup as BS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span></span><br><span class="line">options.add_argument(f<span class="string">&#x27;user-agent=&#123;UA&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>, [<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;useAutomationExtension&#x27;</span>, False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=&quot;***&quot;)</span></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉window.navigator.webdriver字段，防止被检测出是使用selenium</span></span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>web_scraper</title>
    <url>/2022/03/28/python/web-scraper/</url>
    <content><![CDATA[<figure class="highlight sh"><figcaption><span>install</span></figcaption><table><tr><td class="code"><pre><span class="line">https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn</span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><figcaption><span>jingdong example</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;startUrl&quot;</span>:[<span class="string">&quot;https://list.jd.com/list.html?cat=9987,653,655&quot;</span>,<span class="string">&quot;https://list.jd.com/list.html?cat=9987,653,655&amp;page=2&amp;s=58&amp;click=0&quot;</span>],<span class="string">&quot;selectors&quot;</span>:[&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;_root&quot;</span>],<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;#J_goodsList &gt; ul &gt; li&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorElement&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;sku_name&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;name&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;a em&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;price&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;name&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot; div &gt; div.p-price &gt; strong &gt; i&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;comments&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;name&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;.p-commit strong a&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;shop&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;name&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;.p-shop span a&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>tianmao example</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;tianmao&quot;</span>,<span class="string">&quot;startUrl&quot;</span>:[<span class="string">&quot;https://list.tmall.com/search_product.htm?spm=a220m.1000858.0.0.219b2a680geXJ0&amp;s=120&amp;q=%CA%D6%BB%FA&amp;sort=s&amp;style=g&amp;from=mallfp..pc_1_searchbutton&amp;active=1&amp;type=pc#J_Filter&quot;</span>],<span class="string">&quot;selectors&quot;</span>:[&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;sku&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;_root&quot;</span>],<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;#J_ItemList .product&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorElement&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;sku&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;.productTitle a&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;price&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;sku&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;.productPrice em&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;shop&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;sku&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;a.productShop-name&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;sales&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;sku&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;span em&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;,&#123;<span class="string">&quot;delay&quot;</span>:0,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;comments&quot;</span>,<span class="string">&quot;multiple&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;parentSelectors&quot;</span>:[<span class="string">&quot;sku&quot;</span>],<span class="string">&quot;regex&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;selector&quot;</span>:<span class="string">&quot;span a[data-p]&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;SelectorText&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>celery</title>
    <url>/2022/04/09/python/celery/</url>
    <content><![CDATA[<h2 id="celery-用法"><a href="#celery-用法" class="headerlink" title="celery 用法"></a>celery 用法</h2><figure class="highlight sh"><figcaption><span>tasks.py >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># result_address = &#x27;elasticsearch://user:passwd@ip:port/index&#x27;</span></span><br><span class="line"></span><br><span class="line">broker = <span class="string">&#x27;redis://:passwd@ip:port/db&#x27;</span></span><br><span class="line">result_address = <span class="string">&quot;mongodb://user:password@ip:port/db&quot;</span></span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&quot;tasks&quot;</span>, broker=broker, backend=result_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_on_failure(exc, task_id, args, kwargs, einfo):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task failed&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> argv <span class="keyword">in</span> [exc, task_id, args, kwargs, einfo]:</span><br><span class="line">        <span class="built_in">print</span>(argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.conf.update(</span><br><span class="line">    task_serializer=<span class="string">&quot;json&quot;</span>,</span><br><span class="line">    accept_content=[<span class="string">&quot;json&quot;</span>],  <span class="comment"># Ignore other content</span></span><br><span class="line">    result_serializer=<span class="string">&quot;json&quot;</span>,</span><br><span class="line">    timezone=<span class="string">&quot;Asia/Shanghai&quot;</span>,</span><br><span class="line">    enable_utc=True,</span><br><span class="line">    <span class="comment">#  下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次</span></span><br><span class="line">    <span class="comment">#  CELERY_ANNOTATIONS = &#123;&#x27;tasks.add&#x27;:&#123;&#x27;rate_limit&#x27;:&#x27;10/s&#x27;&#125;&#125;</span></span><br><span class="line">    <span class="comment">#  或者限制所有的任务的刷新频率</span></span><br><span class="line">    task_annotations=&#123;<span class="string">&quot;tasks.add&quot;</span>: &#123;<span class="string">&quot;rate_limit&quot;</span>: <span class="string">&quot;2/m&quot;</span>&#125;&#125;,</span><br><span class="line">    <span class="comment">#  annotations=&#123;&quot;tasks.add&quot;: &#123;&quot;rate_limit&quot;: &quot;5/m&quot;, &quot;on_failure&quot;: my_on_failure&#125;&#125;,</span></span><br><span class="line">    <span class="comment">#  annotations=&#123;&quot;*&quot;: &#123;&quot;rate_limit&quot;: &quot;10/s&quot;, &quot;on_failure&quot;: my_on_failure&#125;&#125;,</span></span><br><span class="line">    <span class="comment">#  celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目</span></span><br><span class="line">    worker_concurrency=10,</span><br><span class="line">    <span class="comment">#  celery worker 每次去BROKER中预取任务的数量</span></span><br><span class="line">    prefetch_multiplier=1,</span><br><span class="line">    <span class="comment">#  单个任务的运行时间限制，否则会被杀死</span></span><br><span class="line">    task_time_limit=60,</span><br><span class="line">    <span class="comment">#  压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据</span></span><br><span class="line">    message_compression=<span class="string">&quot;zlib&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task(default_retry_delay=30, max_retries=2, retry_kwargs=&#123;<span class="string">&quot;max_retries&quot;</span>: 3&#125;)</span><br><span class="line">def add(x, y):</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line">    <span class="comment">#  time.sleep(3)</span></span><br><span class="line">    <span class="built_in">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def sleep(seconds):</span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def <span class="built_in">echo</span>(msg, timestamp=False):</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;%s: %s&quot;</span> % (datetime.now(), msg) <span class="keyword">if</span> timestamp <span class="keyword">else</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def error(msg):</span><br><span class="line">    raise Exception(msg)</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>generate.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/mher/flower/blob/master/docs/api.ipynb</span></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    api_root = <span class="string">&quot;http://localhost:5566/api&quot;</span></span><br><span class="line">    task_api = <span class="string">&quot;&#123;&#125;/task&quot;</span>.format(api_root)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;/queues/length&quot;</span>.format(api_root)</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(resp.json())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(20):</span><br><span class="line">        args = &#123;<span class="string">&quot;args&quot;</span>: [i, i**i]&#125;</span><br><span class="line">        url = <span class="string">&quot;&#123;&#125;/async-apply/tasks.add&quot;</span>.format(task_api)</span><br><span class="line">        <span class="comment">#  url = &quot;&#123;&#125;/apply/tasks.add&quot;.format(task_api)</span></span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        resp = requests.post(url, data=json.dumps(args))</span><br><span class="line">        reply = resp.json()</span><br><span class="line">        <span class="built_in">print</span>(reply)</span><br><span class="line"></span><br><span class="line">        args = &#123;<span class="string">&quot;args&quot;</span>: [i, True]&#125;</span><br><span class="line">        url = <span class="string">&quot;&#123;&#125;/async-apply/tasks.echo&quot;</span>.format(task_api)</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        resp = requests.post(url, data=json.dumps(args))</span><br><span class="line">        reply = resp.json()</span><br><span class="line">        <span class="built_in">print</span>(reply)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#  url = &quot;&#123;&#125;/result/&#123;&#125;&quot;.format(task_api, reply[&quot;task-id&quot;])</span></span><br><span class="line">    <span class="comment">#  print(url)</span></span><br><span class="line">    <span class="comment">#  resp = requests.get(url)</span></span><br><span class="line">    <span class="comment">#  print(resp.json())</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>start.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info &gt;&gt; logs/celery_worker.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">celery -A tasks flower --loglevel=info --address=127.0.0.1 --port=5566 &gt;&gt; logs/celery_flower.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
</search>
