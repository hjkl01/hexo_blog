{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"","link":"/linux/index.html"},{"title":"","text":"","link":"/python/index.html"}],"posts":[{"title":"python","text":"code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110# mysql-clientsyay -S --noconfirm mysql-clients gccpip install mysqlclient# jsonjson.dumps(item, ensure_ascii=False, indent=4)# 对字典排序sorted(_dict.items(), key=lambda d: d[1], reverse=False)# unicode replacerepr()# http serverpy2 python -m SimpleHTTPServer 8000py3 python -m http.server 8000# 格式化输出print(&quot;{:02d}&quot;.format(1))print(f&quot;{1:02d}&quot;)# datetimepip install python-dateutilfrom datetime import datetimefrom dateutil import parserformat_time = datetime.now().strftime(&quot;%m/%d/%Y, %H:%M:%S&quot;)t = &quot;Thu, 9 Sep 2021 00:17:59&quot;result = parser.parse(t)print(result)print(type(result))now = datetime.now()print((now - result).days)&gt;&gt;&gt; import arrow&gt;&gt;&gt; arrow.get('2013-05-11T21:23:58.970460+07:00')&lt;Arrow [2013-05-11T21:23:58.970460+07:00]&gt;&gt;&gt;&gt; utc = arrow.utcnow()&gt;&gt;&gt; utc&lt;Arrow [2013-05-11T21:23:58.970460+00:00]&gt;&gt;&gt;&gt; utc = utc.shift(hours=-1)&gt;&gt;&gt; utc&lt;Arrow [2013-05-11T20:23:58.970460+00:00]&gt;&gt;&gt;&gt; local = utc.to('US/Pacific')&gt;&gt;&gt; local&lt;Arrow [2013-05-11T13:23:58.970460-07:00]&gt;&gt;&gt;&gt; local.timestamp()1368303838.970460&gt;&gt;&gt; local.format()'2013-05-11 13:23:58 -07:00'&gt;&gt;&gt; local.format('YYYY-MM-DD HH:mm:ss ZZ')'2013-05-11 13:23:58 -07:00'&gt;&gt;&gt; local.humanize()'an hour ago'&gt;&gt;&gt; local.humanize(locale='ko-kr')'한시간 전'# read big filewith open(&quot;log.txt&quot;) as infile: for line in infile: do_something_with(line) # csvimport csv# readresult = []input_file = csv.DictReader(open(&quot;result.csv&quot;))for row in input_file: result.append(row)print(result)# write dictmy_dict = {&quot;test&quot;: 1, &quot;testing&quot;: 2}with open('mycsvfile.csv', 'w', encoding=&quot;utf-8-sig&quot;) as f: # You will need 'wb' mode in Python 2.x w = csv.DictWriter(f, my_dict.keys()) w.writeheader() w.writerow(my_dict)# write listresult = [{&quot;test&quot;: 1, &quot;testing&quot;: 2}, {&quot;test&quot;: 1, &quot;testing&quot;: 2}]with open('mycsvfile.csv', 'w', encoding=&quot;utf-8-sig&quot;) as f: # You will need 'wb' mode in Python 2.x w = csv.DictWriter(f, result[0].keys()) w.writeheader() w.writerows(result)# xmljsonimport xmljsonfrom lxml.etree import fromstring,tostringjson.loads(json.dumps(xmljson.badgerfish.data(fromstring(con.encode()))))# 乘法表 print ('\\n'.join([' '.join(['%s*%s=%-2s' % (y,x,x*y) for y in range(1,x+1)]) for x in range(1,10)]))","link":"/2021/06/17/python/python/"},{"title":"neovim","text":"我的neovim配置1https://github.com/hjkl01/nvim-config 插件status/tabline vim-airline/vim-airline >folded123456789101112131415Plug 'vim-airline/vim-airline'Plug 'vim-airline/vim-airline-themes'let g:airline#extensions#tabline#formatter = 'default'let g:airline#extensions#tabline#enabled = 1&quot; let g:airline#extensions#tabline#left_sep = ' '&quot; let g:airline#extensions#tabline#left_alt_sep = '|'&quot; let g:airline#extensions#tabline#enabled = 1&quot; let g:airline#extensions#tabline#tab_nr_type = 1 &quot; tab number&quot; let g:airline#extensions#tabline#show_tab_nr = 1&quot; let g:airline#extensions#tabline#formatter = 'default'&quot; let g:airline#extensions#tabline#buffer_nr_show = 0&quot; let g:airline#extensions#tabline#fnametruncate = 16&quot; let g:airline#extensions#tabline#fnamecollapse = 2&quot; let g:airline#extensions#tabline#buffer_idx_mode = 1let g:airline_theme='molokai' format file >folded123456Plug 'Chiel92/vim-autoformat'&quot; autocmd BufWrite * :Autoformatlet g:autoformat_autoindent = 1let g:autoformat_retab = 1let g:autoformat_remove_trailing_spaces = 1 文件目录 >folded1234567891011121314Plug 'preservim/nerdtree'let g:NERDTreeWinPos = &quot;right&quot;let NERDTreeShowHidden=1let NERDTreeShowLineNumbers=1let NERDTreeIgnore = ['\\.pyc$', '__pycache__']let g:NERDTreeWinSize=35let g:NERDTreeDirArrows = 1&quot;当打开vim且没有文件时自动打开NERDTree&quot; autocmd vimenter * if !argc() | NERDTree | endif&quot;&quot; 只剩 NERDTree时自动关闭autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endifnmap &lt;Space&gt;n :NERDTreeToggle&lt;CR&gt;nmap &lt;Space&gt;n &lt;ESC&gt; :NERDTreeToggle&lt;CR&gt; nvim-tree.lua >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114Plug 'kyazdani42/nvim-web-devicons' &quot; for file iconsPlug 'kyazdani42/nvim-tree.lua'autocmd BufEnter * ++nested if winnr('$') == 1 &amp;&amp; bufname() == 'NvimTree_' . tabpagenr() | quit | endif nnoremap &lt;Space&gt;n :NvimTreeToggle&lt;CR&gt; lua &lt;&lt; EOF require'nvim-tree'.setup { -- BEGIN_DEFAULT_OPTS auto_reload_on_write = true, disable_netrw = false, hide_root_folder = false, hijack_cursor = false, hijack_netrw = true, hijack_unnamed_buffer_when_opening = false, ignore_buffer_on_setup = false, open_on_setup = true, -- open_on_setup_file = true, open_on_tab = true, sort_by = &quot;name&quot;, update_cwd = false, view = { width = 30, height = 30, side = &quot;right&quot;, preserve_window_proportions = false, number = true, relativenumber = true, signcolumn = &quot;yes&quot;, mappings = { custom_only = false, list = { -- user mappings go here }, }, }, renderer = { indent_markers = { enable = true, icons = { corner = &quot;└ &quot;, edge = &quot;│ &quot;, none = &quot; &quot;, }, }, },hijack_directories = {enable = true,auto_open = true,}, update_focused_file = { enable = false, update_cwd = false, ignore_list = {}, }, ignore_ft_on_setup = {}, system_open = { cmd = nil, args = {}, }, diagnostics = { enable = false, show_on_dirs = false, icons = { hint = &quot;&quot;, info = &quot;&quot;, warning = &quot;&quot;, error = &quot;&quot;, }, }, filters = { dotfiles = false, custom = {}, exclude = {}, }, git = { enable = true, ignore = true, timeout = 400, }, actions = { use_system_clipboard = true, change_dir = { enable = true, global = false, }, open_file = { quit_on_open = true, resize_window = true, window_picker = { enable = true, chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;, exclude = { filetype = { &quot;notify&quot;, &quot;packer&quot;, &quot;qf&quot;, &quot;diff&quot;, &quot;fugitive&quot;, &quot;fugitiveblame&quot; }, buftype = { &quot;nofile&quot;, &quot;terminal&quot;, &quot;help&quot; }, }, }, }, }, trash = { cmd = &quot;trash&quot;, require_confirm = true, }, log = { enable = false, truncate = false, types = { all = false, config = false, copy_paste = false, git = false, profile = false, }, }, }EOF 注释 >folded12345678910111213141516171819202122232425262728Plug 'preservim/nerdcommenter' &quot; 注释nmap &lt;Space&gt;&lt;Space&gt; &lt;plug&gt;NERDCommenterToggle&quot; Add spaces after comment delimiters by defaultlet g:NERDSpaceDelims = 1&quot; Use compact syntax for prettified multi-line commentslet g:NERDCompactSexyComs = 1&quot; Align line-wise comment delimiters flush left instead of following code indentationlet g:NERDDefaultAlign = 'left'&quot; Set a language to use its alternate delimiters by defaultlet g:NERDAltDelims_java = 1&quot; Add your own custom formats or override the defaults&quot; let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }&quot; Allow commenting and inverting empty lines (useful when commenting a region)let g:NERDCommentEmptyLines = 1&quot; Enable trimming of trailing whitespace when uncommentinglet g:NERDTrimTrailingWhitespace = 1&quot; Enable NERDCommenterToggle to check all selected lines is commented or notlet g:NERDToggleCheckAllLines = 1 other >folded123456789101112131415161718192021222324252627282930313233343536373839404142Plug 'jiangmiao/auto-pairs'Plug 'nvim-lua/plenary.nvim'Plug 'nvim-telescope/telescope.nvim'nnoremap &lt;S-f&gt; &lt;cmd&gt;Telescope find_files&lt;cr&gt;Plug 'mhinz/vim-startify'Plug 'ntpeters/vim-better-whitespace'Plug 'pechorin/any-jump.vim'&quot; Normal mode: Jump to definition under cursornnoremap &lt;leader&gt;j :AnyJump&lt;CR&gt;&quot; Visual mode: jump to selected text in visual modexnoremap &lt;leader&gt;j :AnyJumpVisual&lt;CR&gt;&quot; Normal mode: open previous opened file (after jump)nnoremap &lt;leader&gt;ab :AnyJumpBack&lt;CR&gt;&quot; Normal mode: open last closed search window againnnoremap &lt;leader&gt;al :AnyJumpLastResults&lt;CR&gt;Plug 'voldikss/vim-floaterm'nmap &lt;Space&gt;t :FloatermNew&lt;CR&gt;Plug 'dense-analysis/ale'let b:ale_linters = ['mypy']&quot; let b:ale_linters = ['flake8', 'pylint']Plug 'gelguy/wilder.nvim', { 'do': ':UpdateRemotePlugins' }call wilder#setup({'modes': [':', '/', '?']})call wilder#set_option('pipeline', [ \\ wilder#branch( \\ wilder#cmdline_pipeline(), \\ wilder#search_pipeline(), \\ ), \\ ])call wilder#set_option('renderer', wilder#wildmenu_renderer({ \\ 'highlighter': wilder#basic_highlighter(), \\ })) code complete: lsp >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445Plug 'prabirshrestha/vim-lsp'Plug 'mattn/vim-lsp-settings'Plug 'prabirshrestha/asyncomplete.vim'Plug 'prabirshrestha/asyncomplete-lsp.vim'function! s:on_lsp_buffer_enabled() abort setlocal omnifunc=lsp#complete setlocal signcolumn=yes if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif nmap &lt;buffer&gt; gd &lt;plug&gt;(lsp-definition) nmap &lt;buffer&gt; gs &lt;plug&gt;(lsp-document-symbol-search) nmap &lt;buffer&gt; gS &lt;plug&gt;(lsp-workspace-symbol-search) nmap &lt;buffer&gt; gr &lt;plug&gt;(lsp-references) nmap &lt;buffer&gt; gi &lt;plug&gt;(lsp-implementation) nmap &lt;buffer&gt; gt &lt;plug&gt;(lsp-type-definition) nmap &lt;buffer&gt; &lt;leader&gt;rn &lt;plug&gt;(lsp-rename) nmap &lt;buffer&gt; [g &lt;plug&gt;(lsp-previous-diagnostic) nmap &lt;buffer&gt; ]g &lt;plug&gt;(lsp-next-diagnostic) nmap &lt;buffer&gt; K &lt;plug&gt;(lsp-hover) inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-f&gt; lsp#scroll(+4) inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-d&gt; lsp#scroll(-4) nmap &lt;Space&gt;f &lt;plug&gt;(lsp-document-format) let g:lsp_document_highlight_enabled = 1 let g:lsp_diagnostics_enabled = 1 let g:lsp_format_sync_timeout = 1000 autocmd! BufWritePre *.go,*.py call execute('LspDocumentFormatSync') &quot; autocmd BufWritePre &lt;buffer&gt; LspDocumentFormatSync &quot; refer to doc to add more commandsendfunctionaugroup lsp_install au! &quot; call s:on_lsp_buffer_enabled only for languages that has the server registered. autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()augroup ENDPlug 'github/copilot.vim'&quot; :Copilot setup","link":"/2021/08/17/linux/neovim/"},{"title":"celery","text":"celery 用法tasks.py >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import timefrom datetime import datetimefrom celery import Celery # result_address = 'elasticsearch://user:passwd@ip:port/index'broker = 'redis://:passwd@ip:port/db'result_address = &quot;mongodb://user:password@ip:port/db&quot;app = Celery(&quot;tasks&quot;, broker=broker, backend=result_address)def my_on_failure(exc, task_id, args, kwargs, einfo): print(&quot;task failed&quot;) for argv in [exc, task_id, args, kwargs, einfo]: print(argv)app.conf.update( task_serializer=&quot;json&quot;, accept_content=[&quot;json&quot;], # Ignore other content result_serializer=&quot;json&quot;, timezone=&quot;Asia/Shanghai&quot;, enable_utc=True, # 下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次 # CELERY_ANNOTATIONS = {'tasks.add':{'rate_limit':'10/s'}} # 或者限制所有的任务的刷新频率 task_annotations={&quot;tasks.add&quot;: {&quot;rate_limit&quot;: &quot;2/m&quot;}}, # annotations={&quot;tasks.add&quot;: {&quot;rate_limit&quot;: &quot;5/m&quot;, &quot;on_failure&quot;: my_on_failure}}, # annotations={&quot;*&quot;: {&quot;rate_limit&quot;: &quot;10/s&quot;, &quot;on_failure&quot;: my_on_failure}}, # celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目 worker_concurrency=10, # celery worker 每次去BROKER中预取任务的数量 prefetch_multiplier=1, # 单个任务的运行时间限制，否则会被杀死 task_time_limit=60, # 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据 message_compression=&quot;zlib&quot;,)@app.task(default_retry_delay=30, max_retries=2, retry_kwargs={&quot;max_retries&quot;: 3})def add(x, y): print(x, y) # time.sleep(3) return x + y@app.taskdef sleep(seconds): time.sleep(seconds)@app.taskdef echo(msg, timestamp=False): time.sleep(3) return &quot;%s: %s&quot; % (datetime.now(), msg) if timestamp else msg@app.taskdef error(msg): raise Exception(msg) generate.py12345678910111213141516171819202122232425262728293031323334# https://github.com/mher/flower/blob/master/docs/api.ipynbimport requestsimport jsondef main(): api_root = &quot;http://localhost:5566/api&quot; task_api = &quot;{}/task&quot;.format(api_root) url = &quot;{}/queues/length&quot;.format(api_root) print(url) resp = requests.get(url) print(resp.json()) for i in range(20): args = {&quot;args&quot;: [i, i**i]} url = &quot;{}/async-apply/tasks.add&quot;.format(task_api) # url = &quot;{}/apply/tasks.add&quot;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) args = {&quot;args&quot;: [i, True]} url = &quot;{}/async-apply/tasks.echo&quot;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) # url = &quot;{}/result/{}&quot;.format(task_api, reply[&quot;task-id&quot;]) # print(url) # resp = requests.get(url) # print(resp.json())main() start.sh123celery -A tasks worker --loglevel=info &gt;&gt; logs/celery_worker.log 2&gt;&amp;1 &amp;celery -A tasks flower --loglevel=info --address=127.0.0.1 --port=5566 &gt;&gt; logs/celery_flower.log 2&gt;&amp;1 &amp;","link":"/2022/04/09/python/celery/"},{"title":"spider-selenium","text":"代码示例12345678910111213141516171819202122232425import randomfrom selenium import webdriverfrom time import sleepfrom bs4 import BeautifulSoup as BSoptions = webdriver.ChromeOptions()UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36'options.add_argument(f'user-agent={UA}')options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;])options.add_experimental_option('useAutomationExtension', False)# 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=&quot;***&quot;)driver = webdriver.Chrome(options=options)driver.maximize_window()# 去掉window.navigator.webdriver字段，防止被检测出是使用seleniumdriver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, { &quot;source&quot;: &quot;&quot;&quot; Object.defineProperty(navigator, 'webdriver', { get: () =&gt; undefined }) &quot;&quot;&quot;})","link":"/2021/08/23/python/spider/"},{"title":"web_scraper","text":"install1https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn jingdong example1{&quot;_id&quot;:&quot;test&quot;,&quot;startUrl&quot;:[&quot;https://list.jd.com/list.html?cat=9987,653,655&quot;,&quot;https://list.jd.com/list.html?cat=9987,653,655&amp;page=2&amp;s=58&amp;click=0&quot;],&quot;selectors&quot;:[{&quot;delay&quot;:0,&quot;id&quot;:&quot;name&quot;,&quot;multiple&quot;:true,&quot;parentSelectors&quot;:[&quot;_root&quot;],&quot;selector&quot;:&quot;#J_goodsList &gt; ul &gt; li&quot;,&quot;type&quot;:&quot;SelectorElement&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;sku_name&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;name&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;a em&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;price&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;name&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot; div &gt; div.p-price &gt; strong &gt; i&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;comments&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;name&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;.p-commit strong a&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;shop&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;name&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;.p-shop span a&quot;,&quot;type&quot;:&quot;SelectorText&quot;}]} tianmao example1{&quot;_id&quot;:&quot;tianmao&quot;,&quot;startUrl&quot;:[&quot;https://list.tmall.com/search_product.htm?spm=a220m.1000858.0.0.219b2a680geXJ0&amp;s=120&amp;q=%CA%D6%BB%FA&amp;sort=s&amp;style=g&amp;from=mallfp..pc_1_searchbutton&amp;active=1&amp;type=pc#J_Filter&quot;],&quot;selectors&quot;:[{&quot;delay&quot;:0,&quot;id&quot;:&quot;sku&quot;,&quot;multiple&quot;:true,&quot;parentSelectors&quot;:[&quot;_root&quot;],&quot;selector&quot;:&quot;#J_ItemList .product&quot;,&quot;type&quot;:&quot;SelectorElement&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;name&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;sku&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;.productTitle a&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;price&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;sku&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;.productPrice em&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;shop&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;sku&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;a.productShop-name&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;sales&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;sku&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;span em&quot;,&quot;type&quot;:&quot;SelectorText&quot;},{&quot;delay&quot;:0,&quot;id&quot;:&quot;comments&quot;,&quot;multiple&quot;:false,&quot;parentSelectors&quot;:[&quot;sku&quot;],&quot;regex&quot;:&quot;&quot;,&quot;selector&quot;:&quot;span a[data-p]&quot;,&quot;type&quot;:&quot;SelectorText&quot;}]}","link":"/2022/03/28/python/web-scraper/"},{"title":"mongo","text":"MongoDB 语法 >folded12345678910111213141516171819202122232425# db.users.find({ create_at: { $exists: true } }) # db.users.find() select * from users# db.users.find({&quot;age&quot; : 27}) select * from users where age = 27# db.users.find({&quot;username&quot; : &quot;joe&quot;, &quot;age&quot; : 27}) select * from users where &quot;username&quot; = &quot;joe&quot; and age = 27# db.users.find({}, {&quot;username&quot; : 1, &quot;email&quot; : 1}) select username, email from users# db.users.find({}, {&quot;username&quot; : 1, &quot;_id&quot; : 0}) // no case // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回# db.users.find({&quot;age&quot; : {&quot;$gte&quot; : 18, &quot;$lte&quot; : 30}}) select * from users where age &gt;=18 and age &lt;= 30 // $lt(&lt;) $lte(&lt;=) $gt(&gt;) $gte(&gt;=)# db.users.find({&quot;username&quot; : {&quot;$ne&quot; : &quot;joe&quot;}}) select * from users where username &lt;&gt; &quot;joe&quot;# db.users.find({&quot;ticket_no&quot; : {&quot;$in&quot; : [725, 542, 390]}}) select * from users where ticket_no in (725, 542, 390)# db.users.find({&quot;ticket_no&quot; : {&quot;$nin&quot; : [725, 542, 390]}}) select * from users where ticket_no not in (725, 542, 390)# db.users.find({&quot;$or&quot; : [{&quot;ticket_no&quot; : 725}, {&quot;winner&quot; : true}]}) select * form users where ticket_no = 725 or winner = true# db.users.find({&quot;id_num&quot; : {&quot;$mod&quot; : [5, 1]}}) select * from users where (id_num mod 5) = 1# db.users.find({&quot;$not&quot;: {&quot;age&quot; : 27}}) select * from users where not (age = 27)# db.users.find({&quot;username&quot; : {&quot;$in&quot; : [null], &quot;$exists&quot; : true}}) select * from users where username is null // 如果直接通过find({&quot;username&quot; : null})进行查询，那么连带&quot;没有username&quot;的纪录一并筛选出来# db.users.find({&quot;name&quot; : /joey?/i}) // 正则查询，value是符合PCRE的表达式# db.food.find({fruit : {$all : [&quot;apple&quot;, &quot;banana&quot;]}}) // 对数组的查询, 字段fruit中，既包含&quot;apple&quot;,又包含&quot;banana&quot;的纪录# db.food.find({&quot;fruit.2&quot; : &quot;peach&quot;}) // 对数组的查询, 字段fruit中，第3个(从0开始)元素是peach的纪录# db.food.find({&quot;fruit&quot; : {&quot;$size&quot; : 3}}) // 对数组的查询, 查询数组元素个数是3的记录，$size前面无法和其他的操作符复合使用# db.users.findOne(criteria, {&quot;comments&quot; : {&quot;$slice&quot; : 10}}) // 对数组的查询，只返回数组comments中的前十条，还可以{&quot;$slice&quot; : -10}， {&quot;$slice&quot; : [23, 10]}; 分别返回最后10条，和中间10条# db.people.find({&quot;name.first&quot; : &quot;Joe&quot;, &quot;name.last&quot; : &quot;Schmoe&quot;}) // 嵌套查询# db.blog.find({&quot;comments&quot; : {&quot;$elemMatch&quot; : {&quot;author&quot; : &quot;joe&quot;, &quot;score&quot; : {&quot;$gte&quot; : 5}}}}) // 嵌套查询，仅当嵌套的元素是数组时使用,# db.foo.find({&quot;$where&quot; : &quot;this.x + this.y == 10&quot;}) // 复杂的查询，$where当然是非常方便的，但效率低下。对于复杂查询，考虑的顺序应当是 正则 -&gt; MapReduce -&gt; $where# db.foo.find({&quot;$where&quot; : &quot;function() { return this.x + this.y == 10; }&quot;}) // $where可以支持javascript函数作为查询条件# db.foo.find().sort({&quot;x&quot; : 1}).limit(1).skip(10); // 返回第(10, 11]条，按&quot;x&quot;进行排序; 三个limit的顺序是任意的，应该尽量避免skip中使用large-number Mac上导出MongoDB数据12345678910# Mac install mongo toolsbrew tap mongodb/brewbrew install mongodb-database-tools# in arch: yay -S --noconfirm mongodb-tools-bin## exportmongoexport --host 127.0.0.1:27017 -u user -p passwd --authenticationDatabase admin --db dbname -c cname --forceTableScan -o res.jsonmongoexport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection -o result.json## importmongoimport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection --file=result.json Python 调用 MongoDB >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546import pymongodef connect_mongo(uri, db, tablename): myclient = pymongo.MongoClient(uri) mydb = myclient[db] mycol = mydb[tablename] return mycol, myclientclass MongoAPI: def __init__(self, db=&quot;db&quot;, tablename=&quot;tablename&quot;): self.uri = “mongodb://user:password@host:27017/” self.myclient = pymongo.MongoClient(self.uri) mydb = self.myclient[db] self.mycol = mydb[tablename] # values = {&quot;abr&quot;: 1} def query(self, myquery={&quot;name&quot;: &quot;somename&quot;}, values=None, _limit=10): if _limit: result = [q for q in self.mycol.find(query, values).limit(_limit)] else: result = [q for q in self.mycol.find(query, values)] return result def save(self, data): try: self.mycol.insert_one(data) return True except Exception as err: if &quot;duplicate key error collection&quot; in str(err): print(&quot;saved &quot;, data[&quot;_id&quot;]) else: print(err) return False # myquery = {&quot;asin&quot;: &quot;B07K36J4VP&quot;} # myquery = { &quot;name&quot;: { &quot;$regex&quot;: &quot;^F&quot; } } # newvalues = {&quot;$set&quot;: {&quot;comments&quot;: &quot;values&quot;}} def update(self, myquery, newvalues): self.mycol.update_one(myquery, newvalues, upsert=False) logger.info(f&quot;update success {myquery}&quot;) return True def quit(self): self.myclient.close()","link":"/2021/09/23/python/mongo/"},{"title":"multiprocessing","text":"code12345678910111213141516171819202122232425262728293031323334import multiprocessingdef f(msg): print(msg) return multiprocessing.current_process().name + '-' + msgdef func1(): pool = multiprocessing.Pool(processes=multiprocessing.cpu_count()) results = [] for i in range(10): msg = &quot;hello %d&quot; % (i) results.append(pool.apply_async(f, (msg, ))) pool.close() pool.join() print(&quot;Sub-process(es) done.&quot;) for res in results: print(res.get())def func2(): from multiprocessing import Pool # with Pool(5) as p: with Pool(processes=multiprocessing.cpu_count()) as p: print(p.map(f, [str(i) for i in range(9)]))if __name__ == &quot;__main__&quot;: # func1() func2()","link":"/2021/07/17/python/multiprocessing/"},{"title":"ocr","text":"https://github.com/breezedeus/cnocr","link":"/2021/07/17/python/ocr/"},{"title":"Pip","text":"code123456789101112131415161718192021222324252627282930313233343536# virtualenv (sudo) pip install virtualenvvirtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3# pip freeze &gt; requirements.txt# pipenvalias pv='pipenv run python'alias pi='pipenv run pip install '# pip.conf- ### 一次pip install web.py -i http://pypi.douban.com/simple --trusted-host pypi.douban.com- ### 全局# 清华源pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple# 阿里源pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/# 腾讯源pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple# 豆瓣源pip config set global.index-url http://pypi.douban.com/simple/or# linux:`~/.pip/pip.conf`# windows:`%HOMEPATH%\\pip\\pip.ini）`[global] index-url = http://mirrors.aliyun.com/pypi/simple/[install] trusted-host=mirrors.aliyun.com# locale.Error: unsupported locale settingexport LC_ALL=C","link":"/2021/07/10/python/pip/"},{"title":"settings","text":"code >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# pip install python-dotenv pyyaml loguruimport osimport sysimport tomlimport yamlfrom loguru import loggerfrom dotenv import load_dotenvBASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(&quot;/common&quot;)log_file_path = os.path.join(BASE_DIR, &quot;logs/stdout.log&quot;)err_log_file_path = os.path.join(BASE_DIR, &quot;logs/error.log&quot;)logger.add( log_file_path, format=&quot;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&quot;INFO&quot;,)logger.add( err_log_file_path, format=&quot;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, level=&quot;ERROR&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True,)class SettingsMeta: def __init__(self, _file=None): self.file = _file # read config.yaml def read_yaml(self, key, file=&quot;settings.yaml&quot;): if os.path.exists(file): with open(file, &quot;r&quot;) as f: con = yaml.safe_load(f) if con: # logger.debug(con) return con.get(key) # read .secrets.toml def read_toml(self, key, file=&quot;.secrets.toml&quot;): if os.path.exists(file): con = toml.load(file) if con: # logger.debug(con) return con.get(key) # read .env def read_env(self, key): load_dotenv() return os.getenv(key) def __getattr__(self, key): result = None file_function = { &quot;yaml&quot;: self.read_yaml, &quot;toml&quot;: self.read_toml, &quot;env&quot;: self.read_env, } if self.file: file_type = self.file.split(&quot;.&quot;) func = file_function.get(file_type[-1]) if func: return func(key) else: return functions = [self.read_yaml, self.read_toml, self.read_env] for ft in functions: result = ft(key) if result: return result return resultsettings = SettingsMeta() settings.py12345678910111213141516171819202122232425262728293031323334353637# pip install dynaconf loguruimport osfrom loguru import loggerfrom dynaconf import DynaconfBASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(&quot;/common&quot;)log_file_path = os.path.join(BASE_DIR, &quot;logs/stdout.log&quot;)err_log_file_path = os.path.join(BASE_DIR, &quot;logs/error.log&quot;)logger.add( log_file_path, format=&quot;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&quot;INFO&quot;,)logger.add( err_log_file_path, format=&quot;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, level=&quot;ERROR&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True,)Config = Dynaconf(settings_files=[&quot;.secrets.toml&quot;])print(Config.__dict__)print(Config.redis_ip)","link":"/2021/07/17/python/settings/"},{"title":"Django","text":"在script中使用Django model123456789101112import osimport djangofrom proxyip.models import ProxyIPos.environ['DJANGO_SETTINGS_MODULE'] = 'dj_project.settings'django.setup()p = ProxyIP(ip='192.168.50.1')p.save()print(ProxyIP.objects.all())python manage.py shell &lt; main.py django 导出导入数据123python manage.py dumpdata (myapp) &gt; myapp.jsonpython manage.py loaddata myapp.json","link":"/2021/07/23/python/Django/"},{"title":"fastapi demo","text":"code >folded123456789101112131415161718192021222324252627282930313233343536from fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()# @app.get(&quot;/&quot;)async def read_root(): return {&quot;Hello&quot;: &quot;World&quot;}# @app.get(&quot;/items/{item_id}&quot;)async def read_item(item_id: int, q: str = None): return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}class Item(BaseModel): name: str description: str = None price: float tax: float = None# @app.post(&quot;/items/&quot;)async def create_item(item: Item): return itemapp.add_api_route(&quot;/&quot;, read_root)app.add_api_route(&quot;/item/{item_id}&quot;, read_item)app.add_api_route(&quot;/items/&quot;, create_item, methods=['POST'])if __name__ == '__main__': uvicorn.run('main:app', reload=True)# gunicorn test:app -w 4 -k uvicorn.workers.UvicornWorker","link":"/2021/07/17/python/fastapi/"},{"title":"databases","text":"sqlalchemy安装及导出model12# pip install psycopg2-binary# sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py code >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546from sqlalchemy import create_enginefrom sqlalchemy import Column, Stringfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmakerdb_string = &quot;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose&quot;db = create_engine(db_string)base = declarative_base()class Film(base): __tablename__ = &quot;films&quot; title = Column(String, primary_key=True) director = Column(String) year = Column(String)Session = sessionmaker(db)session = Session()base.metadata.create_all(db)# Createdoctor_strange = Film(title=&quot;Doctor Strange&quot;, director=&quot;Scott Derrickson&quot;, year=&quot;2016&quot;)session.add(doctor_strange)session.commit()# Readfilms = session.query(Film)for film in films: print(film.title)# Updatedoctor_strange.title = &quot;Some2016Film&quot;session.commit()# Deletesession.delete(doctor_strange)session.commit()delete_obj = Shop.__table__.delete().where(Shop.shop_cate.contains(&quot;m&quot;))session.execute(delete_obj)session.commit() databases1234567891011121314151617181920212223242526272829303132333435363738# pip install 'databases[aiomysql]' aiomysqimport asyncio# Create a database instance, and connect to it.from databases import Databaseasync def run(): db_url = &quot;mysql://user:passwd@host:port/db&quot; database = Database(db_url) # database = Database(&quot;sqlite+aiosqlite:///example.db&quot;) await database.connect() # Create a table. # query = &quot;&quot;&quot;CREATE TABLE HighScores (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), score INTEGER)&quot;&quot;&quot; # await database.execute(query=query) # Insert some data. query = &quot;INSERT INTO HighScores(name, score) VALUES (:name, :score)&quot; values = [ {&quot;name&quot;: &quot;Daisy&quot;, &quot;score&quot;: 92}, {&quot;name&quot;: &quot;Neil&quot;, &quot;score&quot;: 87}, {&quot;name&quot;: &quot;Carol&quot;, &quot;score&quot;: 43}, ] await database.execute_many(query=query, values=values) # Run a database query. query = &quot;SELECT * FROM HighScores&quot; rows = await database.fetch_all(query=query) print(&quot;High Scores:&quot;, rows) for r in rows: print(r) return rowsloop = asyncio.get_event_loop()loop.run_until_complete(run())","link":"/2021/07/17/python/databases/"},{"title":"python send mail","text":"fastapi send mail API1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import uvicornfrom fastapi import FastAPI, BackgroundTasks, UploadFile, File, Formfrom starlette.responses import JSONResponsefrom fastapi_mail import FastMail, MessageSchema, ConnectionConfigfrom pydantic import BaseModel, EmailStrfrom typing import List, Textclass EmailSchema(BaseModel): email: List[EmailStr] html: Textconf = ConnectionConfig( # update username, password, from # example qq mail # https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256 MAIL_USERNAME=&quot;qq123456&quot;, MAIL_PASSWORD=&quot;password&quot;, MAIL_FROM=&quot;qq123456@qq.com&quot;, MAIL_PORT=587, MAIL_SERVER=&quot;smtp.qq.com&quot;, MAIL_TLS=True, MAIL_SSL=False, USE_CREDENTIALS=True, VALIDATE_CERTS=True,)app = FastAPI()html = &quot;&quot;&quot;&lt;p&gt;Thanks for using Fastapi-mail&lt;/p&gt;&quot;&quot;&quot;@app.post(&quot;/email&quot;)async def simple_send(email: EmailSchema) -&gt; JSONResponse: message = MessageSchema( subject=&quot;Fastapi-Mail module&quot;, recipients=email.dict().get( &quot;email&quot; ), # List of recipients, as many as you can pass body=email.dict().get(&quot;html&quot;, html), subtype=&quot;html&quot;, ) fm = FastMail(conf) await fm.send_message(message) return JSONResponse(status_code=200, content={&quot;message&quot;: &quot;email has been sent&quot;})@app.post(&quot;/file&quot;)async def send_file( background_tasks: BackgroundTasks, file: UploadFile = File(...), email: EmailStr = Form(...),) -&gt; JSONResponse: message = MessageSchema( subject=&quot;Fastapi mail module&quot;, recipients=[email], body=&quot;Simple background task &quot;, attachments=[file], ) fm = FastMail(conf) background_tasks.add_task(fm.send_message, message) return JSONResponse(status_code=200, content={&quot;message&quot;: &quot;email has been sent&quot;})if __name__ == '__main__': uvicorn.run('main:app', reload=True, host='127.0.0.1', port=8000) # https://sabuhish.github.io/fastapi-mail/example/ yagmail12345678910import yagmailusername = &quot;xxx@qq.com&quot;password = &quot;xxx&quot;host = &quot;smtp.qq.com&quot;mail = yagmail.SMTP(user=username, password=password, host=host)mail.send(to=username, subject=&quot;这是主题&quot;, contents=[&quot;这是内容&quot;, r&quot;./logs/1695814_1.png&quot;])print(&quot;finish !&quot;)","link":"/2021/08/17/python/fastapi_mail/"},{"title":"jupyter","text":"python jupyter 安装123# jupyter configpip install jupyterjupyter notebook --generate-config 设置123456789101112131415# ipythonfrom notebook.auth import passwdpasswd()# orjupyter notebook passwordvim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip='*'c.NotebookApp.password = u''c.NotebookApp.open_browser = Falsec.NotebookApp.port = 8000jupyter notebook 启动多个jupyter服务 >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import osimport reimport secretsimport yamlfrom rich import printclass ConfigMeta: def __init__(self, _file=&quot;config.yaml&quot;): self.file = _file def __getattr__(self, key): with open(self.file, &quot;r&quot;) as file: self.con = yaml.safe_load(file) result = self.con.get(key) return resultConfig = ConfigMeta()def generate_password(): result = [] for i in range(1, 9): temp = {} temp[&quot;port&quot;] = 9120 + i temp[&quot;dirname&quot;] = f&quot;njrd_venv_{9120+i}&quot; temp[&quot;password&quot;] = secrets.token_urlsafe(32) result.append(temp) with open(&quot;config.yaml&quot;, &quot;w&quot;) as file: yaml.dump({&quot;config&quot;: result}, file, allow_unicode=True)def stop_old_jupyter(): cmd = &quot;ps aux | grep jupyter&quot; temp = os.popen(cmd) for t in temp: print(t) ppid = re.findall(&quot;\\d+&quot;, t)[0] cmd = f&quot;kill -9 {ppid}&quot; print(cmd) os.system(cmd)def main(): print(Config.config) for con in Config.config: dirname = con[&quot;dirname&quot;] port = con[&quot;port&quot;] password = con[&quot;password&quot;] if os.path.exists(f&quot;./{dirname}&quot;): print(f&quot;exists {dirname}&quot;) else: cmds = [ f&quot;/usr/bin/python3.6 -m venv {dirname}/.venv&quot;, f&quot;{dirname}/.venv/bin/pip install --upgrade pip&quot;, f&quot;{dirname}/.venv/bin/pip install jupyter &quot;, ] for cmd in cmds: print(cmd) os.system(cmd) cmd = f&quot;source {dirname}/.venv/bin/activate &amp;&amp; nohup {dirname}/.venv/bin/jupyter notebook --ip='*' --port='{port}' --notebook-dir='{dirname}' --NotebookApp.token='{password}' --NotebookApp.password='{password}' &gt;&gt; /dev/null 2&gt;&amp;1 &amp; &quot; print(cmd) os.system(cmd) returnif __name__ == &quot;__main__&quot;: # generate_password() stop_old_jupyter() main()","link":"/2021/07/17/python/jupyter/"},{"title":"mitmproxy","text":"install123pip install mitmproxy# open mitm.it after set proxymitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py http.HTTPFlow 实例 flow1234567891011121314151617181920flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-type等字段flow.request.url #完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数flow.request.pretty_url #同flow.request.url目前没看出什么差别flow.request.host #域名flow.request.method #请求方式。POST、GET等flow.request.scheme #什么请求 ，如httpsflow.request.path # 请求的路径，url除域名之外的内容flow.request.get_text() #请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型flow.request.query #返回MultiDictView类型的数据，url直接带的键值参数flow.request.get_content()#bytes,结果如flow.request.get_text()flow.request.raw_content #bytes,结果如flow.request.get_content()flow.request.urlencoded_form #MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数flow.request.multipart_form #MultiDictView，content-type：multipart/form-data时的请求参数，不包含url直接带的键值参数以上均为获取request信息的一些常用方法，对于response，同理flow.response.status_code #状态码flow.response.text#返回内容，已解码flow.response.content #返回内容，二进制flow.response.setText()#修改返回内容，不需要转码 example1234def response(flow): if &quot;some url&quot; in flow.request.url: print(&quot;[*] Request: {}&quot;.format(flow.request.url)) print(&quot;[*] Response: {}&quot;.format(flow.response.text))","link":"/2022/03/28/python/mitmproxy/"},{"title":"远程桌面","text":"arch install todesk12345wget https://dl.todesk.com/linux/todesk_2.0.2_x86_64.pkg.tar.zstsudo pacman -U todesk_2.0.2_x86_64.pkg.tar.zstsudo systemctl restart todeskd.service 详情参考: https://www.todesk.com/download_detail.html","link":"/2021/07/28/linux/todesk/"},{"title":"ubuntu","text":"中文乱码1234567sudo apt-get -y install language-pack-zh-hans#写入 ~/.zshrc:LC_ALL=zh_CN.utf8export LC_ALLsource ~/.zshrc 配置静态IP12345678910path: `/etc/network/interface`auto eth1iface eth1 inet staticaddress 192.168.56.xxnetmask 255.255.255.0network 192.168.56.0broadcast 192.168.56.255if possible, 配置路由器中的dhcp. ip route12sudo route add -net 66.1.254.0/24 gw 66.16.62.254 enp4s0sudo ip addr flush dev enp4s0 安装Ubuntu 分区12345efiswap 交换空间/ ext4/boot 200M左右 ext4 /tmp 5G左右 ext4 手动配置swap内存12345678sudo fallocate -l 4G /swapfilesudo chmod 600 /swapfilesudo mkswap /swapfilesudo swapon /swapfilesudo vim /etc/fstab/swapfile none swap sw 0 0","link":"/2021/06/17/linux/ubuntu/"},{"title":"vnc","text":"服务端安装12345678910111213141516171819# ubuntu sudo apt-get install x11vnc x11vnc -storepasswd x11vnc -auth guess -once -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -rfbport 5900 -shared x11vnc -forever https://www.realvnc.com/en/connect/download/viewer/# arch yay -S x11vnc net-tools update -&gt; /etc/gdm/custom.conf: WaylandEnable=false x11vnc -wait 50 -noxdamage -passwd PASSWORD -display :0 -forever -o /var/log/x11vnc.log -bg 客户端1https://www.realvnc.com/","link":"/2021/07/17/linux/vnc/"},{"title":"Mac Config &amp;&amp; Softwares","text":"刷新DNS1sudo dscacheutil -flushcache Mac终端录屏123456# https://github.com/icholy/ttygifbrew install ttygifttyrec myrecording# On OSX optionally you can set a -f flag which will bypass cropping which is needed for terminal apps which aren't full screen. Both standard Terminal and iTerm apps are supported.ttygif myrecording -f 在touch bar 上显示歌词-LyricsXhttps://github.com/ddddxxx/LyricsX mtmr 配置 >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136[{ &quot;type&quot;: &quot;dnd&quot;, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 38 }, { &quot;type&quot;: &quot;brightnessDown&quot;, &quot;width&quot;: 32, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot; }, { &quot;type&quot;: &quot;brightnessUp&quot;, &quot;width&quot;: 32, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot; }, { &quot;type&quot;: &quot;dock&quot;, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 420 }, { &quot;type&quot;: &quot;group&quot;, &quot;align&quot;: &quot;right&quot;, &quot;bordered&quot;: false, &quot;title&quot;: &quot;Media&quot;, &quot;items&quot;: [{ &quot;type&quot;: &quot;close&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot; }, { &quot;type&quot;: &quot;brightnessDown&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 36 }, { &quot;type&quot;: &quot;brightness&quot;, &quot;width&quot;: 200, &quot;align&quot;: &quot;left&quot;, &quot;image&quot;: { &quot;base64&quot;: &quot;iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQMAAAD58POIAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAGUExURffLOPfLNyaSVzUAAAACdFJOU/kBxOqnWgAAAbJJREFUSMfVljtyhDAQBVulQCFH4CgcDR1NR9ERFBKoeA5GfGddtkNvwFINFKP5tED22+Zxwviv6QVKfIEc/iNoF5gkpLIeYI8SUp4PsAUJiekADQntF6isQjvxCTrhAJlFqMMBeIH9BMsD7DAb2BhvYbIyNAOCZIWqYKGTpDZJFQu9EKVd44RxQRq3IrULWD62C8wSssWUZEsR0k6wcDOrJZmoBpMKI+s5qkBQCQOUJADVOECdOsDS0gDbsgHMfT4rVwHSrZQFIN5ABka8BgDgAeZ+BztBgvUEnSgVlhNsTFJjvoF5HAZorBpdYKAiSRbqNyBIUr6AjZMdPwO72R40MElS+wZUWA+wQ6LAYkFvdIhkmA+wQSDDdIAGAZ6A34H0x0fca11gBZZsIHSIfnE/5+NjCn/OuiuUB+/aunZwDeNayjXdTpDN0wlY+r1PfWu75nfj8RogN2JuCN2Y5qgMwTI0wGPUnQw6Qarx0sVNKA5Mn6VUL22lIbZoYitDbPmlvocc9Umfl2D7adz1reC3pF8av4m+DCenp/ndZuG3E7fhuC3pH2+vnz8V3MfE+bnxBTXuuIMTrLWHAAAAAElFTkSuQmCC&quot; } }, { &quot;type&quot;: &quot;brightnessUp&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 36 }, { &quot;type&quot;: &quot;volumeDown&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 36 }, { &quot;type&quot;: &quot;volume&quot;, &quot;width&quot;: 200, &quot;align&quot;: &quot;left&quot; }, { &quot;type&quot;: &quot;volumeUp&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;left&quot;, &quot;width&quot;: 36 }, { &quot;type&quot;: &quot;previous&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;center&quot; }, { &quot;type&quot;: &quot;play&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;center&quot; }, { &quot;type&quot;: &quot;next&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;center&quot; } ] }, { &quot;type&quot;: &quot;displaySleep&quot;, &quot;width&quot;: 20, &quot;align&quot;: &quot;right&quot;, &quot;bordered&quot;: false }, { &quot;type&quot;: &quot;weather&quot;, &quot;align&quot;: &quot;right&quot;, &quot;icon_type&quot;: &quot;images&quot;, &quot;api_key&quot;: &quot;ca93a0bb8cdb428552660d83249e4bc9&quot;, &quot;bordered&quot;: false }, { &quot;type&quot;: &quot;play&quot;, &quot;align&quot;: &quot;right&quot;, &quot;width&quot;: 38 }, // { // &quot;type&quot;: &quot;volumeDown&quot;, // &quot;bordered&quot;: false, // &quot;align&quot;: &quot;right&quot;, // &quot;width&quot;: 28 // }, // { // &quot;type&quot;: &quot;volumeUp&quot;, // &quot;bordered&quot;: false, // &quot;align&quot;: &quot;right&quot;, // &quot;width&quot;: 28 // }, { &quot;type&quot;: &quot;mute&quot;, &quot;bordered&quot;: false, &quot;align&quot;: &quot;right&quot; }, // { // &quot;type&quot;: &quot;battery&quot;, // &quot;align&quot;: &quot;right&quot;, // &quot;bordered&quot;: false // }, // { // &quot;type&quot;: &quot;timeButton&quot;, // &quot;formatTemplate&quot;: &quot;HH:mm&quot;, // &quot;align&quot;: &quot;right&quot;, // &quot;bordered&quot;: false, // &quot;longAction&quot;: &quot;shellScript&quot;, // &quot;longExecutablePath&quot;: &quot;/usr/bin/pmset&quot;, // &quot;longShellArguments&quot;: [&quot;sleepnow&quot;] // }]","link":"/2021/07/27/mac/mac/"},{"title":"我的Oh My zsh + nvim 配置","text":"install git, make, neovim, python3直连GitHub123git clone https://github.com/lesssound/dotfiles ~/.dotfilescd ~/.dotfiles make github 国内镜像gitee123git clone https://gitee.com/lesssound/dotfiles ~/.dotfilescd ~/.dotfilesmake gitee","link":"/2021/07/10/linux/zsh/"},{"title":"yarn_npm","text":"yarn/npm 设置国内源临时1npm --registry https://registry.npm.taobao.org install express 写入文件command12345yarn config set registry 'https://registry.npm.taobao.org'yarn config get registrynpm config set registry https://registry.npm.taobao.orgnpm config get registry use yrm12345npm install -g yrm# yarn global add yrmyrm lsyrm use taobaoyrm test","link":"/2021/07/10/linux/yarn_npm/"},{"title":"nginx","text":"nginx config推荐在线配置1https://www.digitalocean.com/community 静态文件123456789server { listen 80; listen [::]:80; server_name blog.viewer.pub; root /html/github; location / { index index.html index.htm; }} 转发端口123456789server { listen 80; server_name dj.viewer.pub; root /html/www/; location / { proxy_pass http://127.0.0.1:8000/; }} 重定向12345server { listen 80; server_name blog.viewer.pub; rewrite ^(.*)$ https://blog.viewer.pub; #将所有HTTP请求通过rewrite指令重定向到HTTPS。# } https证书安装certbot1yay -S --noconfirm certbot 静态文件1sudo certbot certonly -d domain --webroot -w /html/filepath/ 12345678910111213141516server { listen 443 ssl; server_name blog.viewer.pub; ssl_certificate /etc/letsencrypt/live/blog.viewer.pub/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/blog.viewer.pub/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/blog.viewer.pub/chain.pem; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { root /html/github; #站点目录。 index index.html index.htm; }} 转发端口1sudo certbot certonly -d domain 123456789101112131415server { listen 443 ssl; server_name nocodb.viewer.pub; ssl_certificate /etc/letsencrypt/live/nocodb.viewer.pub/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/nocodb.viewer.pub/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/nocodb.viewer.pub/chain.pem; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:8080/; }} 转发mongo端口(TCP)123456789101112stream { server { listen &lt;your incoming Mongo TCP port&gt;; proxy_connect_timeout 1s; proxy_timeout 3s; proxy_pass stream_mongo_backend; } upstream stream_mongo_backend { server &lt;localhost:your local Mongo TCP port&gt;; }}","link":"/2021/09/02/linux/nginx/"},{"title":"socks5 转 http 之 privoxy","text":"socks5 转 httpprivoxy 配置123456789101112yay -S privoxycd /etc/privoxy(sudo) mv config config.bak(sudo) vi configforward-socks5t / 127.0.0.1:1080 .listen-address 127.0.0.1:9888sudo systemctl restart privoxy.servicesudo systemctl enable privoxy.service","link":"/2021/07/14/linux/privoxy/"},{"title":"proxy","text":"trojan-go12345brew install trojan-go修改 /usr/local/etc/trojan-go/config.jsonbrew service start trojan-go glider123456yay -S gliderglider -listen :1080 -forward trojan://password@ip:443# with authglider -listen http://user:user_passwd@:61000 -forward trojan://password@ip:443 trojan12345https://github.com/trojan-gfw/trojan### 机场推荐: https://portal.shadowsocks.nz/aff.php?aff=24252### 部署 https://github.com/Jrohy/trojan 旧server:123456789101112131415161718192021install libsodiumpip install shadowsockspip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U# path : /etc/shadowsocks.json{ &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;: { &quot;8000&quot;: &quot;password&quot; }, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;fast_open&quot;:true, &quot;pid-file&quot;: &quot;/path/ss.pid&quot;, &quot;log-file&quot;: &quot;/path/ss.log&quot;}(sudo) ssserver -c /etc/shadowsocks.json -d startsudo ssserver -d stophttps://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E 开启bbr1234567891011121314151617181920wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.shsysctl net.ipv4.tcp_available_congestion_control#返回值一般为：#net.ipv4.tcp_available_congestion_control = bbr cubic renosysctl net.ipv4.tcp_congestion_control#返回值一般为：#net.ipv4.tcp_congestion_control = bbrsysctl net.core.default_qdisc#返回值一般为：#net.core.default_qdisc = fqlsmod | grep bbr#返回值有 tcp_bbr 模块即说明bbr已启动。 clientubuntu下使用， Mac下载 https://github.com/shadowsocks/ShadowsocksX-NG/releases/12345678910111213141516171819pip install shadowsockspath : ~/.shadowsocks/shadowsocks.json{ &quot;server&quot;:&quot;my_server_ip&quot;, &quot;server_port&quot;:my_server_port, &quot;password&quot;:&quot;my_password&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;fast_open&quot;:true, &quot;pid-file&quot;: &quot;/path&quot;, &quot;log-file&quot;: &quot;/path&quot;}sslocal -c ~/.shadowsocks/shadowsocks.json -d start可先在系统设置里设置全局代理，在浏览器里安装 https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif","link":"/2021/07/17/linux/proxy/"},{"title":"samba","text":"在arch 中安装参考1https://wiki.archlinux.org/title/samba 在ubuntu中安装123456789101112131415161718192021sudo apt-get install sambasudo useradd xxxsudo smbpasswd -a xxxsudo vi /etc/samba/smb.conf#### 配置内加入以下内容[dev]comment = devpath = /var/devvalid user = xxxwrite list = xxxcreate mask = 0664directory mask = 0775force user = xxxforce group = xxxpublic = noavailable = yesbrowseable = yessecurity = user### 重启samba【sudo service smbd restart】","link":"/2021/07/17/linux/samba/"},{"title":"starchart","text":"星图在markdown中的代码:1![stars](https://starchart.cc/lesssound/pornhub.svg) example:","link":"/2022/02/23/linux/starcharts/"},{"title":"Supervisor","text":"后缀为conf或ini1234567891011121314[program:frp_ssh]command = /home/user/frp/frpc -c /home/user/frp/config.ini directory = /home/user/somediruser = userautostart = trueautorestart = truestartsecs = 3redirect_stderr = truestdout_logfile_maxbytes = 50MBstdout_logfile_backups = 10stdout_logfile = /home/user/frp/log","link":"/2021/07/17/linux/supervisor/"},{"title":"Docker","text":"install12wget -qO- https://get.docker.com/ | shsudo usermod -aG docker $USER 修改源1234path: /etc/docker/daemon.json{ &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]} lazydocker1docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/.config/jesseduffield/lazydocker lazyteam/lazydocker docker-compose.yml ddns 123456789101112131415version: '3.1'services: ddns: image: sanjusss/aliyun-ddns restart: always network_mode: &quot;host&quot; environment: # https://usercenter.console.aliyun.com/ AKID: AKSCT: DOMAIN: REDO: 30 TTL: 600 TIMEZONE: 8.0 TYPE: A,AAAA gops 12345678910111213141516171819202122232425262728293031323334version: '3'services: db: image: postgres:11-alpine restart: unless-stopped environment: POSTGRES_USER: 'gogs' POSTGRES_PASSWORD: 'gogs' POSTGRES_DB: 'postgres' ports: - &quot;5432:5432&quot; networks: - gogs_net volumes: - ./data/postgres_data:/var/lib/postgresql/data gogs: image: gogs/gogs:latest networks: - gogs_net depends_on: - db links: - db ports: - &quot;10022:22&quot; - &quot;10080:3000&quot; restart: unless-stopped volumes: - ./data/gogs_data:/data:rwnetworks: gogs_net: driver: bridge httpbin 12docker run -p 80:80 kennethreitz/httpbinhttp://127.0.0.1/get?show_env=1 hoppscotch 1docker run --rm --name hoppscotch -p 3000:3000 hoppscotch/hoppscotch:latest mongoDB 1234# .envMONGO_ROOT_USER=usernameMONGO_ROOT_PASSWORD=passwordMONGODB_URL=mongodb://username:password@mongo:27017 12345678910111213141516171819202122232425262728# mongo.ymlversion: '3.1'services: mongo: image: mongo restart: always ports: - 27017:27017 environment: - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER} - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD} volumes: - ./data/mongo:/data/db mongo-express: image: mongo-express restart: always ports: - 8081:8081 links: - mongo environment: - ME_CONFIG_MONGODB_URL=${MONGODB_URL} - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_ROOT_USER} - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_ROOT_PASSWORD} MySQL 1234567891011121314151617181920version: '3.1'services: db: # We use a mariadb image which supports both amd64 &amp; arm64 architecture image: mariadb:10.6.4-focal # If you really want to use MySQL, uncomment the following line #image: mysql:8.0.27 command: '--default-authentication-plugin=mysql_native_password' volumes: - ./data/mysql:/var/lib/mysql restart: always environment: - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=data - MYSQL_USER=user - MYSQL_PASSWORD=password - MYSQL_ROOT_HOST=% ports: - 3306:3306 linux配置 123456789/etc/mysql/my.cnf:[client]default-character-set = utf8[mysqld]default-storage-engine = INNODBcharacter-set-server = utf8collation-server = utf8_general_ci others 12345678protected-mode yesmysqldump -u root -p --all-databases &gt; data.txtsource data.txtcreate database testdb default charset utf8 COLLATE utf8_general_ci;http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz-a-model-generator pgadmin4 1234567891011version: '3.5'services: pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: xx@xx.com PGADMIN_DEFAULT_PASSWORD: password ports: - &quot;80:80&quot; PostgreSQL 1234567891011121314151617181920212223version: '3'services: db: image: postgres:10-alpine restart: always ports: - 5432:5432 environment: POSTGRES_PASSWORD: 'password' POSTGRES_USER: 'user' POSTGRES_DB: 'postgres' PGDATA: '/var/lib/postgresql/data' volumes: - ./postgres:/var/lib/postgresql/data admin: image: adminer restart: always depends_on: - db ports: - 8080:8080 可视化工具推荐 1234docker run -d -e SESSIONS=true -p 8081:8081 sosedoff/pgweb# mactableplus 在linux 中安装 1234567891011121314151617181920212223sudo apt-get install postgresql-clientsudo apt-get install postgresql# sudo apt-get install pgadmin3# pgclisudo adduser dbusersudo su - postgres# sudo -u postgres psqlpsql\\password postgresCREATE USER dbuser WITH PASSWORD 'password';CREATE DATABASE exampledb OWNER dbuser;GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432psql exampledb# psql exampledb &lt; exampledb.sql #恢复外部数据pg_dump -U username -h localhost databasename &gt;&gt; sqlfile.sqlsudo vi /etc/postgresql/9.5/main/postgresql.confsudo gedit /etc/postgresql/9.5/main/pg_hba.conf host all all 0.0.0.0/0 md5sudo /etc/init.d/postgresql restart 查询有外键的数据 1select count(*) from &quot;case&quot; where court_id in (select id from court where province =''); 导出数据结构 123python -m pwiz -e postgresql -u user -P db &gt; model.pypython -m pwiz -e mysql -H 192.168.1.x -u root -P dbname &gt; model.py Postwoman 1docker run -p 3000:3000 liyasthomas/postwoman:latest Redis redis 及其持久化 1234# redis.confrequirepass 123456appendonly yesdaemonize no 123456789101112version: '3'services: redis: image: redis restart: unless-stopped # command: redis-server --requirepass 123456 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./redis.conf:/usr/local/etc/redis/redis.conf - ./data/redis:/data/ 书签管理器 shiori 123456789101112131415161718192021222324252627282930313233# 原链接 https://github.com/go-shiori/shiori/# loginuser: shiori # passwd: gopherversion: &quot;2.1&quot;services: shiori: image: nicholaswilde/shiori:latest container_name: shiori-default environment: TZ: Asia/Shanghai PUID: 1000 PGID: 1000 SHIORI_PG_HOST: db SHIORI_PG_PORT: 5432 SHIORI_PG_USER: user SHIORI_PG_PASS: password SHIORI_PG_NAME: &quot;&quot; ports: - 8080:8080 restart: unless-stopped volumes: - ./data/shiori:/data depends_on: - db db: image: postgres restart: always environment: POSTGRES_USER: user POSTGRES_PASSWORD: password volumes: - ./data/shiori_postgres:/var/lib/postgresql/data Gitea 12345678910111213141516171819202122232425262728293031323334353637383940414243# web管理界面里 默认端口3000和22不要改# example: ssh://git@viewer.pub:58001/user/project.gitversion: &quot;3&quot;networks: gitea: external: falseservices: server: image: gitea/gitea:1.15.4 container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 - DB_TYPE=postgres - DB_HOST=db:5432 - DB_NAME=gitea - DB_USER=username - DB_PASSWD=password restart: always networks: - gitea volumes: - ./data/gitea/data:/data ports: - &quot;58000:3000&quot; - &quot;58001:22&quot; depends_on: - db db: image: postgres:13-alpine restart: always environment: - POSTGRES_USER=username - POSTGRES_PASSWORD=password - POSTGRES_DB=gitea networks: - gitea volumes: - ./data/gitea/postgres:/var/lib/postgresql/data samba 1234567891011121314151617181920212223version: '3.4'services: samba: image: dperson/samba environment: TZ: 'EST5EDT' networks: - default ports: - &quot;137:137/udp&quot; - &quot;138:138/udp&quot; - &quot;139:139/tcp&quot; - &quot;445:445/tcp&quot; read_only: true tmpfs: - /tmp restart: unless-stopped stdin_open: true tty: true volumes: - /data:/mnt:z command: '-s &quot;Volume;/mnt;yes;no;no;USER&quot; -u &quot;USER;PASSWORD&quot; -p' automatic-api: nocodb 123456789101112131415161718192021222324252627282930313233343536version: '3.3'services: root_db: image: postgres:13-alpine restart: unless-stopped ports: - 5432:5432 command: postgres -c 'max_connections=500' environment: POSTGRES_PASSWORD: 'passwd' POSTGRES_USER: 'username' POSTGRES_DB: 'postgres' PGDATA: '/var/lib/postgresql/data' healthcheck: test: pg_isready -U &quot;$$POSTGRES_USER&quot; -d &quot;$$POSTGRES_DB&quot; interval: 10s timeout: 2s retries: 10 volumes: - ./data/nocodb_pg:/var/lib/postgresql/data nocodb: depends_on: root_db: condition: service_healthy image: nocodb/nocodb:latest ports: - &quot;8080:8080&quot; - &quot;8081:8081&quot; - &quot;8082:8082&quot; - &quot;8083:8083&quot; restart: always environment: NC_DB: &quot;pg://root_db:5432?u=username&amp;p=passwd&amp;d=postgres&quot; automatic-api: prest 123456789101112131415161718192021222324252627282930313233343536# https://github.com/prest/prest#test-using-dockerversion: &quot;3&quot;services: postgres: image: postgres volumes: - &quot;./data/postgres:/var/lib/postgresql/data&quot; environment: - POSTGRES_USER=prest - POSTGRES_DB=prest - POSTGRES_PASSWORD=prest ports: - &quot;5432:5432&quot; healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;pg_isready&quot;, &quot;-U&quot;, &quot;prest&quot;] interval: 30s retries: 3 prest: # use latest build - analyze the risk of using this version in production image: prest/prest links: - &quot;postgres:postgres&quot; environment: - PREST_DEBUG=false - PREST_AUTH_ENABLED=true - PREST_PG_HOST=postgres - PREST_PG_USER=prest - PREST_PG_PASS=prest - PREST_PG_DATABASE=prest - PREST_PG_PORT=5432 - PREST_SSL_MODE=disable depends_on: postgres: condition: service_healthy ports: - &quot;3000:3000&quot; 电影播放 embyserver 12345678910111213141516171819202122version: &quot;2.3&quot;services: emby: image: emby/embyserver container_name: embyserver runtime: nvidia # Expose NVIDIA GPUs # network_mode: host # Enable DLNA and Wake-on-Lan environment: - UID=1000 # The UID to run emby as (default: 2) - GID=100 # The GID to run emby as (default 2) - GIDLIST=100 # A comma-separated list of additional GIDs to run emby as (default: 2) volumes: - ./data/embyserver/programdata:/config # Configuration directory - ./data/embyserver/tvshows:/mnt/share1 # Media directory - /data/media:/media ports: - 8096:8096 # HTTP port # - 8920:8920 # HTTPS port devices: - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes # - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi restart: unless-stopped 网盘 cloudreve >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051version: '3'services: aria2: image: p3terx/aria2-pro logging: options: max-size: 1m ports: - 6800:6800 - 6888:6888 - 6888:6888/udp environment: - PUID=${PUID} - PGID=${PGID} - RPC_SECRET=${ARIA2_RPC_SECRET} volumes: - ${ARIA2_CONFIG_PATH}:/config - ${TEMP_FOLDER_PATH}:/downloads restart: unless-stopped cloudreve: image: xavierniu/cloudreve ports: - 15212:5212 environment: - PUID=${PUID} - PGID=${PGID} volumes: - ${CLOUDREVE_UPLOAD_PATH}:/cloudreve/uploads - ${TEMP_FOLDER_PATH}:/downloads - ${CLOUDREVE_CONF_PATH}:/cloudreve/config - ${CLOUDREVE_DB_PATH}:/cloudreve/db - ${CLOUDREVE_AVATAR_PATH}:/cloudreve/avatar # .envPUID=1000PGID=1000TZ=&quot;Asia/Shanghai&quot;# &gt; Aria2ARIA2_RPC_SECRET=&lt;secret&gt;TEMP_FOLDER_PATH=/data/cloudreve/aria2/tempARIA2_CONFIG_PATH=/data/cloudreve/aria2/conf# &gt; CloudreveCLOUDREVE_UPLOAD_PATH=/data/cloudreve/sharedfoldersCLOUDREVE_CONF_PATH=/data/cloudreve/cloudreve/configCLOUDREVE_DB_PATH=/data/cloudreve/dbCLOUDREVE_AVATAR_PATH=/data/cloudreve/avatar","link":"/2021/07/10/docker/docker/"},{"title":"SwitchyOmega","text":"SwitchyOmega 访问变慢关闭chrome的安全dnsPrivacy and Security -&gt; Security -&gt; Use Secure DNS 参考: https://github.com/FelisCatus/SwitchyOmega/issues/1742#issuecomment-826272936","link":"/2021/07/28/linux/SwitchyOmega/"},{"title":"adb","text":"adb commands12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152adb devices #查看连接设备adb start-server 启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb serveradb kill-server 停止adb serveradb -s cf27456f shell # 指定连接设备使用命令adb install test.apk # 安装应用adb install -r demo.apk #安装apk 到sd 卡：adb uninstall cn.com.test.mobile #卸载应用，需要指定包adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件adb shell pm list packages #列出手机装的所有app 的包名adb shell pm list packages -s 列出系统应用的所有包名adb shell pm list packages -3 #列出除了系统应用的第三方应用包名adb shell pm clear cn.com.test.mobile #清除应用数据与缓存adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用adb shell dumpsys package #包信息Package Informationadb shell dumpsys meminfo #内存使用情况Memory Usageadb shell am force-stop cn.com.test.mobile #强制停止应用adb logcat #查看日志adb logcat -c #清除log 缓存adb reboot #重启adb get-serialno #获取序列号adb shell getprop ro.build.version.release #查看Android 系统版本adb shell top -s 10 #查看占用内存前10 的appadb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地adb bugreport #查看bug 报告adb help #查看ADB 帮助","link":"/2022/01/10/linux/adb/"},{"title":"arch pppoe","text":"pppoe 拨号123456789101112yay -S --noconfirm rp-pppoeifconfig # 查看对应的网卡sudo ifconfig 网卡 down # 停止网卡服务sudo pppoe-setup # 输入对应的用户名密码等信息sudo pppoe-startsudo route delete defaultsudo route add default ppp0 # ppp0可能是其他名字 ifconfig查看sudo nvim /etc/resolvconf.conf # 更新name_serverssudo resolvconf -u # 更新DNS","link":"/2022/01/29/linux/arch-pppoe/"},{"title":"arch","text":"VPS linux to arch wiki https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers ⚠️ 设置root的密码 wget https://tinyurl.com/vps2arch 也会被重定向到以下 url1wget https://gitlab.com/drizzt/vps2arch/-/raw/master/vps2arch 启动脚本1sh ./vps2arch 当你从脚本默认的源下载速度较慢的时候，可以使用 -m 参数指定源，例如 1234(sudo) sh ./vps2arch -m https://mirrors.neusoft.edu.cn/archlinux/sync ; reboot -f 使用 ntp12345pacman -S ntptimedatectl set-ntp true# 设置时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc utf8 编辑 /etc/locale.gen 取消一下行的注释（你可能需要一个编辑器，如 vim，请自行安装）12en_GB.UTF-8 UTF-8zh_CN.UTF-8 UTF-8 执行 locale-gen 创建 /etc/locale.conf 并编辑 LANG 这一 变量，比如： LANG=zh_CN.UTF-8 源设置123path : /etc/pacman.conf[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch or 1sudo pacman-mirrors -i -c China 输入法1234567891011sudo pacman -Rs $(pacman -Qsq fcitx)sudo pacman -S fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-chinese-addonsvi ~/.xprofileexport GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot;fcitx5 &amp;","link":"/2021/07/14/linux/arch/"},{"title":"Dota-Wings","text":"【天下DotA】Ti6 Wings夺冠特辑（上）：远征海外，如履薄冰——小组赛有惊无险 【天下DotA】Ti6 Wings夺冠特辑（中）：只影前行，扬刀立名——淘汰赛势如破竹 【天下DotA】Ti6 Wings夺冠特辑（下）：胸怀信念，振翅高飞——总决赛梦想成真","link":"/2021/07/25/daily/dota/"},{"title":"我的团长我的团","text":"【1900】《我的团长我的团》精讲合集","link":"/2021/07/25/daily/%E6%88%91%E7%9A%84%E5%9B%A2%E9%95%BF%E6%88%91%E7%9A%84%E5%9B%A2/"},{"title":"My Baby","text":"","link":"/2021/06/13/daily/My-Baby/"},{"title":"git &amp;&amp; ssh","text":"git configgenerate public key123git config --global user.name &quot;&quot;git config --global user.email &quot;&quot;ssh-keygen -t rsa -b 4096 -C &quot;&quot; git config12345678910git config --global http.https://github.com.proxy socks5://127.0.0.1:1080git config --global https.https://github.com.proxy socks5://127.0.0.1:1080# or vi ~/.gitconfig[http &quot;https://github.com&quot;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000[https &quot;https://github.com&quot;] proxy = socks5://127.0.0.1:1080 postBuffer = 524288000 git submodule12git submodule add https://github.com/liuyib/hexo-theme-stun/ themes/stungit submodule update --remote ssh config$HOME/.ssh/config123456789101112131415161718192021222324252627Host github HostName github.com User git # 走 HTTP 代理 # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080 # 走 socks5 代理 ProxyCommand nc -v -x 127.0.0.1:1080 %h %pHost archServer HostName 192.168.xx.xx User xxx Port xxx # use ipv4 # AddressFamily inet IdentitiesOnly yes IdentityFile ~/.ssh/id_rsa ServerAliveInterval 120 # 转发跳板机端口ssh -tt -i ./id_rsa -L 0.0.0.0:local_port:host2:host2_port user@host1# 上传共钥到目标服务器ssh-copy-id -i ~/.ssh/id_rsa.pub archServer# 转发服务器到本机的1082端口ssh -D 1082 -f -C -q -N archServer","link":"/2022/04/07/linux/git/"}],"tags":[{"name":"dota2","slug":"dota2","link":"/tags/dota2/"},{"name":"我的团长我的团","slug":"我的团长我的团","link":"/tags/%E6%88%91%E7%9A%84%E5%9B%A2%E9%95%BF%E6%88%91%E7%9A%84%E5%9B%A2/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"proxy","slug":"proxy","link":"/tags/proxy/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"arch","slug":"arch","link":"/tags/arch/"},{"name":"pppoe","slug":"pppoe","link":"/tags/pppoe/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"vim","slug":"vim","link":"/tags/vim/"},{"name":"neovim","slug":"neovim","link":"/tags/neovim/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"samba","slug":"samba","link":"/tags/samba/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"supervisor","slug":"supervisor","link":"/tags/supervisor/"},{"name":"remote desktop","slug":"remote-desktop","link":"/tags/remote-desktop/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"yarn npm","slug":"yarn-npm","link":"/tags/yarn-npm/"},{"name":"django","slug":"django","link":"/tags/django/"},{"name":"fastapi","slug":"fastapi","link":"/tags/fastapi/"},{"name":"sqlalchemy","slug":"sqlalchemy","link":"/tags/sqlalchemy/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"email","slug":"email","link":"/tags/email/"},{"name":"jupyter","slug":"jupyter","link":"/tags/jupyter/"},{"name":"mongodb","slug":"mongodb","link":"/tags/mongodb/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"ocr","slug":"ocr","link":"/tags/ocr/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"spider","slug":"spider","link":"/tags/spider/"},{"name":"selenium","slug":"selenium","link":"/tags/selenium/"},{"name":"chrome","slug":"chrome","link":"/tags/chrome/"}],"categories":[{"name":"daily","slug":"daily","link":"/categories/daily/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"mac","slug":"mac","link":"/categories/mac/"},{"name":"python","slug":"python","link":"/categories/python/"}]}